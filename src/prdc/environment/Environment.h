#ifndef PRDC_ENVIRONMENT_H
#define PRDC_ENVIRONMENT_H

/*
* PSCF - Polymer Self-Consistent Field Theory
*
* Copyright 2015 - 2025, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <prdc/solvers/MixtureReal.h>         // method parameter
#include <pscf/environment/EnvironmentBase.h> // base class
#include <util/containers/FSArray.h>          // container
#include <iostream>

namespace Pscf {
namespace Prdc {

   using namespace Util;

   /**
   * Base class mask and external field generator for variable-cell SCFT.
   * 
   * In general, the mask and external fields generated by an Environment
   * are dependent on the lattice parameter(s) of the calculation box.
   * As a result, in variable-cell SCFT calculations, the mask and external
   * fields may distort non-affinely upon changing the lattice parameters.
   * Such a non-affine distortion will contribute to the stress. 
   * Therefore, in addition to the features defined in EnvironmentBase,
   * this class contains members and methods that allow the Environment
   * to compute, store, and write the stress for each lattice parameter,
   * taking into account the contributions from any non-affine 
   * distortions.
   * 
   * Furthermore, it may be preferable with certain Environments to 
   * minimize a property other than fHelmholtz with respect to the 
   * lattice parameters. For instance, in a thin film it is useful to 
   * minimize the excess free energy per unit area, 
   *     (fHelmholtz - fRef) * Delta, 
   * where fRef is a reference free energy and Delta is the film 
   * thickness. To minimize alternative free-energetic properties,
   * one must use an alternate form of the stress. Subclasses of this
   * class may define and use such an alternate form of the stress, 
   * the details of which will vary depending on the class.
   * 
   * The stress-related methods of this class are only used if the unit
   * cell is flexible, which is not mandatory. Thus, the modifyStress() 
   * method, which performs the environment-specific aspects of the 
   * stress calculation, is not a pure virtual method, and it only needs 
   * to be redefined by a subclass if the subclass is meant to be paired 
   * with a flexible unit cell. 
   * 
   * To use the stress-related features of this class, setNParam must
   * first be called. 
   * 
   * \ingroup Prdc_Environment_Module
   */
   class Environment : public EnvironmentBase
   {

   public:

      /**
      * Constructor.
      */
      Environment();

      /**
      * Destructor.
      */
      ~Environment();

      /**
      * Sets needsUpdate() to true and hasStress() to false. 
      * 
      * Whenever system properties that may affect the Environment are 
      * changed, reset() should be called. Such properties include 
      * lattice parameters and any input parameters in the Environment
      * block of the parameter file. 
      * 
      * Methods that use the Environment for calculations should first
      * check if needsUpdate() is true, and if so, call generate(). Or,
      * if a method expects that the Environment should always be up
      * to date when it is called, it can simply check that needsUpdate()
      * is false. 
      */
      void reset();

      /**
      * Compute and store the environment-modified SCFT stress.
      * 
      * First, the conventional SCFT stress is accessed from the Mixture
      * object. Then, the modifyStress method is used to add any additional 
      * stress contributions due to the Environment and impose 
      * transformations (optional) on the stress to allow it to minimize a 
      * property other than fHelmholtz. The resulting stress is then stored,
      * and can be accessed via the stress() method.
      * 
      * Upon returning, hasStress = true.
      * 
      * \param mixture  const reference to Mixture object with stress
      * \param flexibleParams  array indicating which stresses to compute
      */
      template <int D, class PT, class ST>
      void computeStress(MixtureReal<D, PT, ST> const & mixture, 
                         FSArray<bool, 6> const & flexibleParams);

      /**
      * Modify stress to account for Environment, for one lattice parameter.
      * 
      * This virtual method performs only the Environment-specific aspects
      * of the stress calculation, while all other aspects are handled by
      * the computeStress method above. 
      * 
      * This method will only be called when the Environment is used
      * in combination with a variable unit cell. Subclasses can thus
      * leave the method unimplemented if they will only be used in
      * rigid cells. 
      * 
      * \param paramId  index of the lattice parameter with this stress
      * \param stress  baseline SCFT stress computed by a Mixture object
      */
      virtual double modifyStress(int paramId, double stress) const;
      
      /**
      * Return the environment-modified SCFT stress for one parameter.
      * 
      * \param paramId  index of the lattice parameter with this stress
      */
      double stress(int paramId) const;

      /**
      * Write the environment-modified SCFT stress.
      * 
      * \param out  output stream
      */
      void writeStress(std::ostream& out) const;

      /**
      * Has the stress been calculated?
      */
      bool hasStress() const;

      /**
      * Set the number of lattice parameters.
      * 
      * This will throw an error if it has been called more than once.
      * 
      * \param nParams  number of lattice parameters
      */
      void setNParams(int nParams);

   private: 

      /// Environment-modified stress values
      FSArray<double, 6> stress_;

      /// Lattice parameter indices for each element in stress_
      FSArray<int, 6> stressIds_;

      /// Has the stress been calculated?
      bool hasStress_;

      /// Number of lattice parameters
      int nParam_;
      
   };

   /*
   * Compute and store the environment-modified SCFT stress.
   * 
   * (Note: this definition is included in header file so that it can 
   * be implicitly instantiated by the compiler wherever needed)
   */
   template <int D, class PT, class ST>
   void Environment::computeStress(MixtureReal<D, PT, ST> const & mixture, 
                                   FSArray<bool, 6> const & flexibleParams)
   {
      if (hasStress_) return;

      UTIL_CHECK(!EnvironmentBase::needsUpdate());
      UTIL_CHECK(mixture.hasStress());
      UTIL_CHECK(nParam_ > 0);
      UTIL_CHECK(stress_.size() == 0);
      UTIL_CHECK(stressIds_.size() == 0);

      double stress;
      for (int i = 0; i < nParam_; ++i) {
         if (flexibleParams[i]) {
            // First, retrieve stress contribution from Mixture
            stress = mixture.stress(i);

            // Next, allow Environment to modify stress using virtual
            // modifyStress method (defined by subclasses)
            stress = modifyStress(i, stress);

            // Store stress and its index
            stress_.append(stress);
            stressIds_.append(i);
         }
      }

      hasStress_ = true;
   }

} // namespace Prdc
} // namespace Pscf
#endif