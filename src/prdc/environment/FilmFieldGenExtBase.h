#ifndef PRDC_EXT_GEN_FILM_BASE_H
#define PRDC_EXT_GEN_FILM_BASE_H

/*
* PSCF - Polymer Self-Consistent Field Theory
*
* Copyright 2015 - 2025, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <pscf/sweep/ParameterType.h>         // Return type of method
#include <pscf/environment/FieldGenerator.h>  // Base class
#include <pscf/math/RealVec.h>                // Container
#include <util/containers/DArray.h>           // Container
#include <string>



namespace Pscf {
namespace Prdc {

   using namespace Util;

   /**
   * Base class Field Generator for external fields in thin-film systems.
   * 
   * This is a base class for FilmFieldGenExt that defines all traits of a 
   * FilmFieldGenExt that do not require access to the System (System access is
   * needed, for example, to access the mask and set the external fields).
   * 
   * If the user chooses a FilmFieldGenExt object to generate external fields,
   * the external fields will have the same shape as the mask, with a 
   * magnitude defined by a Flory--Huggins-like chi parameter. This class
   * is specific to thin-film systems because it also allows for a 
   * different chi parameter to be defined on the top boundary than on
   * the bottom, through user input arrays chi_bottom and chi_top. See 
   * \ref scft_thin_films_page for more information. 
   * 
   * \ingroup Prdc_Field_Module
   */
   template <int D>
   class FilmFieldGenExtBase : public FieldGenerator
   {

   public:

      /**
      * Constructor
      */
      FilmFieldGenExtBase();

      /**
      * Destructor
      */
      ~FilmFieldGenExtBase();

      /**
      * Read and initialize.
      *
      * \param in  input parameter stream
      */
      void readParameters(std::istream& in);

      /**
      * Check whether system has changed such that the fields need updating
      */
      bool needsUpdate() const;

      /**
      * Check that the system is compatible with these fields.
      * 
      * The external fields generated by this class have the same functional
      * form and system constraints as the mask, so it is assumed that these
      * checks have already been performed by the object that generated the
      * mask. However, there is one exception: the external fields can have
      * different chi values on top and bottom, which reduces the symmetry
      * of the system below the symmetry of the mask. If chiBottom != chiTop,
      * this method checks that the space group is compatible with a thin
      * film unit cell with asymmetric walls.
      */
      void checkCompatibility();

      /**
      * Are the walls chemically identical?
      * 
      * This is the case when chiBottom is equal to chiTop.
      */
      bool hasSymmetricWalls() const;

      /**
      * Are the walls athermal?
      * 
      * This is only true if all values in chiBottom and chiTop are zero.
      */
      bool isAthermal() const;

      /**
      * Return specialized sweep parameter types to add to the Sweep object.
      * 
      * In this class, the two specialized sweep parameters are chi_top
      * and chi_bottom.
      */
      GArray<ParameterType> getParameterTypes();

      /**
      * Set the value of a specialized sweep parameter.
      * 
      * In this class, the two specialized sweep parameters are chi_top
      * and chi_bottom.
      * 
      * \param name  name of the specialized parameter
      * \param ids  array of integer indices specifying the value to set
      * \param value  the value to which the parameter is set
      * \param success  was the attempt to set the parameter successful?
      */
      void setParameter(std::string name, DArray<int> ids, double value, 
                        bool& success);

      /**
      * Get the value of a specialized sweep parameter.
      * 
      * In this class, the two specialized sweep parameters are chi_top
      * and chi_bottom.
      * 
      * \param name  name of the specialized parameter
      * \param ids  array of integer indices specifying the value to set
      * \param success  was the attempt to get the parameter successful?
      */
      double getParameter(std::string name, DArray<int> ids, bool& success) 
      const;

      /**
      * Get const chiBottom matrix by reference
      */
      DArray<double> const & chiBottom() const;

      /**
      * Get const chiTop array by reference
      */
      DArray<double> const & chiTop() const;

      /**
      * Get the chi parameter between the bottom wall and species s
      * 
      * \param s  species index, 0 <= id < nVertex
      */
      double chiBottom(int s) const;

      /**
      * Get the chi parameter between the top wall and species s
      * 
      * \param s  species index, 0 <= id < nVertex
      */
      double chiTop(int s) const;

      /**
      * Get value of normalVecId.
      */
      int normalVecId() const;

      /**
      * Get value of interfaceThickness.
      */
      double interfaceThickness() const;

      /**
      * Get value of excludedThickness.
      */
      double excludedThickness() const;

      /**
      * Get contribution to the stress from these external fields
      * 
      * The external fields defined by this class change in a non-affine 
      * manner upon changing the lattice parameter corresponding to 
      * normalVecId. Thus, if this lattice parameter is allowed to be 
      * flexible, the "stress" used to optimize the parameter must 
      * contain an additional term arising from the external fields. This 
      * method evaluates this term and returns its value. Access to 
      * various System properties is required, so the method must be 
      * implemented by subclasses.
      * 
      * \param paramId  index of the lattice parameter being varied
      */
      virtual double stress(int paramId) const = 0;

      using ParameterModifier::setParameter; // overloaded method
      using ParameterModifier::getParameter; // overloaded method

   protected:

      /**
      * Compute the field(s) and store where the System can access
      */
      virtual void compute() = 0;

      /**
      * Get the space group name for this system.
      */
      virtual std::string systemSpaceGroup() const = 0;

      /**
      * Get one of the lattice vectors for this system.
      * 
      * \param id  index of the desired lattice vector
      */
      virtual RealVec<D> systemLatticeVector(int id) const = 0;

      /**
      * Get the number of monomer species for this system.
      */
      virtual int systemNMonomer() const = 0;

      /**
      * The lattice vector normal to the film used to generate these fields.
      * 
      * This vector is set to be equal to the system's lattice vector with
      * index normalVecId_ each time the external fields are generated. The 
      * system's lattice vectors may then change, and this normalVecCurrent_
      * vector is used to detect whether they have changed. This is used to 
      * decide whether a new set of external fields needs to be generated.
      */
      RealVec<D> normalVecCurrent_;

      /**
      * The chiBottom array used to generate the current external fields.
      * 
      * This array is set to be equal to chiBottom_ each time the external 
      * fields are generated. The chiBottom array may then be changed via 
      * the setParameter method, and this chiBottomCurrent_ array is
      * used to detect whether they have changed. This is used to determine 
      * whether a new set of external fields needs to be generated.
      */
      DArray<double> chiBottomCurrent_;

      /**
      * The chiTop array used to generate the current external fields.
      * 
      * This array is set to be equal to chiTop_ each time the external 
      * fields are generated. The chiTop array may then be changed via 
      * the setParameter method, and this chiTopCurrent_ array is
      * used to detect whether they have changed. This is used to determine 
      * whether a new set of external fields needs to be generated.
      */
      DArray<double> chiTopCurrent_;

      using FieldGenerator::isDependent_;
      using FieldGenerator::type_;

   private:

      /// Lattice basis vector that is normal to the walls
      int normalVecId_;

      /// Interface thickness
      double interfaceThickness_;

      /// Excluded (wall) thickness
      double excludedThickness_;

      /**
      * chiBottom array.
      * 
      * This array can be modified using the setParameter() method.
      */
      DArray<double> chiBottom_;

      /**
      * chiTop array.
      * 
      * This array can be modified using the setParameter() method.
      */
      DArray<double> chiTop_;

   };

   // Inline member functions

   // Get chiBottom array by const reference
   template <int D>
   inline DArray<double> const & FilmFieldGenExtBase<D>::chiBottom() const
   {  return chiBottom_; }

   // Get chiTop array by const reference
   template <int D>
   inline DArray<double> const & FilmFieldGenExtBase<D>::chiTop() const
   {  return chiTop_; }

   // Get the chi parameter between the bottom wall and species s
   template <int D>
   inline double FilmFieldGenExtBase<D>::chiBottom(int s) const
   {  return chiBottom_[s]; }

   // Get the chi parameter between the top wall and species s
   template <int D>
   inline double FilmFieldGenExtBase<D>::chiTop(int s) const
   {  return chiTop_[s]; }

   // Get value of normalVecId.
   template <int D> 
   inline int FilmFieldGenExtBase<D>::normalVecId() const
   {  return normalVecId_; }

   // Get value of interfaceThickness.
   template <int D> 
   inline double FilmFieldGenExtBase<D>::interfaceThickness() const
   {  return interfaceThickness_; }

   // Get value of excludedThickness.
   template <int D> 
   inline double FilmFieldGenExtBase<D>::excludedThickness() const
   {  return excludedThickness_; }

}
}

#include "FilmFieldGenExtBase.tpp"
#endif
