#ifndef PSCF_ENVIRONMENT_H
#define PSCF_ENVIRONMENT_H

/*
* PSCF - Polymer Self-Consistent Field Theory
*
* Copyright 2015 - 2025, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <util/param/ParamComposite.h>    // base class
#include <pscf/sweep/ParameterModifier.h> // base class

namespace Pscf {

   using namespace Util;

   /**
   * Template for classes that internally generate masks and external fields.
   * 
   * An "environment" in PSCF is defined to be a set of user-defined, 
   * externally imposed fields that affect the resulting SCFT solution.
   * This includes masks and external potential fields. Masks define an
   * inhomogeneous density constraint, where certain regions of the 
   * calculation box may have reduced or zero polymer density. External
   * potential fields define inhomogeneous energetic penalties for 
   * monomer species to be located at certain positions, which are 
   * separate from the saddle-point 'w' potential fields generated by
   * the surrounding species. 
   * 
   * Environment classes (subclasses of Environment) are created
   * through the inclusion of an optional, polymorphic Environment 
   * block of the parameter file. Different combinations of masks and
   * external fields (i.e., different types of environments) will have
   * different class names and different required parameters to define
   * the imposed fields. If an Environment block is included in a 
   * parameter file, the Environment class will read the necessary 
   * parameters, construct imposed fields, and update them as needed.
   * 
   * Imposed fields, in general, are dependent on the size of the 
   * calculation box. If the fields deform non-affinely upon changing
   * the box size, then the imposed fields will also contribute to the
   * stress. Therefore, Environment classes have a stress() method that
   * returns the Environment's contribution to the stress. 
   * 
   * Furthermore, it may be preferable with certain imposed fields to 
   * minimize a property other than fHelmholtz with respect to the 
   * lattice parameters. For instance, in a thin film it is useful to 
   * minimize the excess free energy per unit area, 
   *     (fHelmholtz - fRef) * Delta, 
   * where fRef is a reference free energy and Delta is the film 
   * thickness. To minimize alternative free-energetic properties,
   * one must use an alternate form of the stress. Environment classes
   * provide a method called modifyStress() to convert the stress into
   * this alternate form, which will vary depending on the type of
   * Environment.
   * 
   * \ingroup Pscf_Environment_Module
   */
   class Environment : public ParamComposite, public ParameterModifier
   {

   public:

      /**
      * Constructor.
      */
      Environment();

      /**
      * Destructor.
      */
      ~Environment();

      /**
      * Checks if fields need to be (re)generated. If so, generates them. 
      * 
      * Upon completion, needsUpdate() is set to false, and will remain
      * false until the reset() method is called. If needsUpdate() is 
      * already false when generate() is called, it will do nothing and
      * return immediately.
      * 
      * If the fields have already been generated, this method may or may
      * not need to regenerate some or all of them, depending on which 
      * system properties have changed since the fields were last generated. 
      * Subclass implementations of generate() should check relevant system 
      * properties and only regenerate fields if necessary.
      */
      virtual void generate() = 0;

      /**
      * Sets needsUpdate() to true. 
      * 
      * Whenever system properties that may affect the Environment are 
      * changed, reset() should be called. Such properties include 
      * lattice parameters and any input parameters in the Environment
      * block of the parameter file. 
      * 
      * Methods that use the Environment for calculations should first
      * check if needsUpdate() is true, and if so, call generate(). Or,
      * if a method expects that the Environment should always be up
      * to date when it is called, it can simply check that needsUpdate()
      * is false. 
      */
      void reset();

      /**
      * Does this Environment need to be updated?
      */
      bool needsUpdate() const;

      /**
      * Return the Environment's contribution to the stress.
      * 
      * This method will only be called when the Environment is used
      * in combination with a variable unit cell. Subclasses can thus
      * leave the method unimplemented if they will only be used in
      * rigid cells. 
      * 
      * \param paramId  index of the lattice parameter with this stress
      */
      virtual double stress(int paramId) const;

      /**
      * Modify stress to minimize a property other than fHelmholtz. 
      * 
      * The property that should be minimized will vary depending on the
      * type of Environment. In cases where fHelmholtz is the desired 
      * property to be minimized, this method returns the stress that
      * it was provided, without modification. This is the default 
      * behavior if the subclass does not define its own modifyStress
      * implementation.
      * 
      * \param paramId  index of the lattice parameter with this stress
      * \param stress  unmodified stress value
      */
      virtual double modifyStress(int paramId, double stress) const;

      /**
      * Does this Environment generate a mask?
      */
      bool generatesMask() const;

      /**
      * Does this Environment generate external fields?
      */
      bool generatesExternalFields() const;

   protected:

      /// Does this Environment generate a mask?
      bool generatesMask_;

      /// Does this Environment generate external fields?
      bool generatesExternalFields_;

      /// Does this Environment need to be updated?
      bool needsUpdate_;

   };

   // Inline member functions

   // Constructor
   inline Environment::Environment()
    : generatesMask_(false),
      generatesExternalFields_(false),
      needsUpdate_(true)
   {  setClassName("Environment"); }

   // Destructor
   inline Environment::~Environment()
   {}

   // Sets needsUpdate() to true. 
   inline void Environment::reset()
   {  needsUpdate_ = true; }

   // Does this Environment need to be updated?
   inline bool Environment::needsUpdate() const
   {  return needsUpdate_; }

   // Return the Environment's contribution to the stress. 
   inline double Environment::stress(int paramId) const
   {  UTIL_THROW("Unimplemented stress() method called."); }

   // Modify stress to minimize a property other than fHelmholtz. 
   inline double 
   Environment::modifyStress(int paramId, double stress) const
   {  
      UTIL_CHECK(!needsUpdate_);
      return stress; 
   }

   // Does this Environment generate a mask?
   inline bool Environment::generatesMask() const
   {  return generatesMask_; }

   // Does this Environment generate external fields?
   inline bool Environment::generatesExternalFields() const
   {  return generatesExternalFields_; }

} // namespace Pscf
#endif