#ifndef PSCF_ENVIRONMENT_BASE_H
#define PSCF_ENVIRONMENT_BASE_H

/*
* PSCF - Polymer Self-Consistent Field Theory
*
* Copyright 2015 - 2025, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <util/param/ParamComposite.h>    // base class
#include <pscf/sweep/ParameterModifier.h> // base class

namespace Pscf {

   using namespace Util;

   /**
   * Base class mask and external field generator.
   * 
   * An "environment" in PSCF is defined to be a set of user-defined, 
   * externally imposed fields that affect the resulting SCFT solution.
   * This includes masks and external chemical potential fields. Masks 
   * define an inhomogeneous density constraint, where certain regions 
   * of the calculation box may have reduced or zero polymer density. 
   * External potential fields define inhomogeneous energetic penalties 
   * for monomer species to be located at certain positions, which are 
   * distinct from the saddle-point 'w' potential fields generated by
   * the surrounding molecules. 
   * 
   * Environment classes (subclasses of EnvironmentBase) are created
   * through the inclusion of an optional, polymorphic Environment 
   * block of the parameter file. Different combinations of masks and
   * external fields (i.e., different types of environments) will have
   * different class names and different required parameters to define
   * the imposed fields. If an Environment block is included in a 
   * parameter file, the Environment class will read the necessary 
   * parameters, construct imposed fields, and can subsequently update 
   * them if the system changes in a way that will affect the imposed 
   * fields.
   * 
   * This class is a subclass of ParameterModifier so that, if desired,
   * subclasses may declare parameters that can be varied in a Sweep.
   * 
   * Subclasses must call the protected method setGenerateBools to set 
   * generatesMask and generatesExternalFields to their appropriate 
   * values before generating the fields. They must also call the 
   * protected method setNeedsUpdateFalse at the end of their generate
   * method.
   * 
   * \ingroup Pscf_Environment_Module
   */
   class EnvironmentBase : public ParamComposite, public ParameterModifier
   {

   public:

      /**
      * Constructor.
      */
      EnvironmentBase();

      /**
      * Destructor.
      */
      ~EnvironmentBase();

      /**
      * Checks if fields need to be (re)generated. If so, generates them. 
      * 
      * Upon completion, needsUpdate() is set to false, and will remain
      * false until the reset() method is called. If needsUpdate() is 
      * already false when generate() is called, it will do nothing and
      * return immediately.
      * 
      * If the fields have already been generated, this method may or may
      * not need to regenerate some or all of them, depending on which 
      * system properties have changed since the fields were last generated. 
      * Subclass implementations of generate() should check relevant system 
      * properties and only regenerate fields if necessary.
      */
      virtual void generate() = 0;

      /**
      * Sets needsUpdate() to true. 
      * 
      * Whenever system properties that may affect the Environment are 
      * changed, reset() should be called. Such properties include 
      * lattice parameters and any input parameters in the Environment
      * block of the parameter file. 
      * 
      * Methods that use the Environment for calculations should first
      * check if needsUpdate() is true, and if so, call generate(). Or,
      * if a method expects that the Environment should always be up
      * to date when it is called, it can simply check that needsUpdate()
      * is false. 
      * 
      * This method is virtual so that subclasses can, if needed, update
      * additional internal variables whenever reset() is called.
      */
      virtual void reset();

      /**
      * Does this Environment need to be updated?
      */
      bool needsUpdate() const;

      /**
      * Does this Environment generate a mask?
      */
      bool generatesMask() const;

      /**
      * Does this Environment generate external fields?
      */
      bool generatesExternalFields() const;

      using ParamComposite::setClassName;

   protected:

      /**
      * Set needsUpdate to false.
      * 
      * Should be called by subclasses at the end of their generate() method.
      */
      void setNeedsUpdateFalse();

      /**
      * Set generatesMask and generatesExternalFields.
      * 
      * Should be called by subclasses before fields are generated.
      * Should only be called once.
      * 
      * \param generatesMask  Does this Environment generate a mask?
      * \param generatesExt  Does this Environment generate external fields?
      */
      void setGenerateBools(bool generatesMask, bool generatesExt);

   private:

      /// Does this Environment need to be updated?
      bool needsUpdate_;

      /// Does this Environment generate a mask?
      bool generatesMask_;

      /// Does this Environment generate external fields?
      bool generatesExternalFields_;

      /// Has setGenerateBools been called?
      bool boolsSet_;
      
   };

   // Member functions

   // Constructor
   inline EnvironmentBase::EnvironmentBase()
    : needsUpdate_(true),
      generatesMask_(false),
      generatesExternalFields_(false),
      boolsSet_(false)
   {  setClassName("EnvironmentBase"); }

   // Destructor
   inline EnvironmentBase::~EnvironmentBase()
   {}

   // Sets needsUpdate() to true. 
   inline void EnvironmentBase::reset()
   {  needsUpdate_ = true; }

   // Does this Environment need to be updated?
   inline bool EnvironmentBase::needsUpdate() const
   {  return needsUpdate_; }

   // Does this Environment generate a mask?
   inline bool EnvironmentBase::generatesMask() const
   {  return generatesMask_; }

   // Does this Environment generate external fields?
   inline bool EnvironmentBase::generatesExternalFields() const
   {  return generatesExternalFields_; }

   // Set needsUpdate to false.
   inline void EnvironmentBase::setNeedsUpdateFalse()
   {  
      if (!boolsSet_) {
         UTIL_THROW("Must call setGenerateBools before generating fields.");
      }
      needsUpdate_ = false; 
   }

   // Set generatesMask and generatesExternalFields.
   inline void EnvironmentBase::setGenerateBools(bool generatesMask, 
                                                 bool generatesExt)
   {  
      UTIL_CHECK(!boolsSet_);
      generatesMask_ = generatesMask;
      generatesExternalFields_ = generatesExt;
      boolsSet_ = true;
   }

} // namespace Pscf
#endif