# ======================================================================
# General definitions for all systems (Do not modify)

# Assign value of CXX_FLAGS, depending on whether debugging is enabled
ifdef UTIL_DEBUG
   # Flags for serial programs with debugging
   CXXFLAGS=$(CXXFLAGS_DEBUG)
else
   # Flags for serial programs with no debugging
   CXXFLAGS=$(CXXFLAGS_FAST)
endif

# Initialize INCLUDE path for header files (must include SRC_DIR)
# This initial value is added to in the patterns.mk file in each 
# namespace level subdirectory of the src/ directory.
INCLUDES= -I$(SRC_DIR)

# Variable UTIL_CXX11 must be defined to enable use of features of
# the C++ 2011 language standard. 
UTIL_CXX11=1

# ======================================================================
# Makefile Pattern Rules and Recipes
#
# The makefile variables defined above are used in the makefile rules 
# that control compilation of C++ files, creation of libraries, and
# linking to create executables. The following sections briefly explain
# these rules, to provide a context for the meaning of the variables 
# defined above.
#
#-----------------------------------------------------------------------
# Compiler Pattern Rules:
#
# The top level subdirectories of src/ named util/, pscf/, prdc, r1d/, 
# rpc/ and rpg/ each contain the source code defined in a particular
# namespace, and are referred to here as namespace level directories.
#
# Each such namespace level directory contains makefile fragments named
# sources.mk, patterns.mk and include.mk. The purposes of these files
# are as follows:
# 
#    sources.mk  defines a list of source files in the directory
#    patterns.mk defines pattern rules for compilation 
#    include.mk  indirectly includes other required makefile fragments
# 
# The makefile file in each namespace level directory includes the
# include.mk file from that directory, which indirectly includes the
# pattern file from the same directory and all relevant sources.mk
# files that contain required source file lists.
#
# Some namespace level sub-directories of src/ "depend" on others:
# A namespace level directory named A is said to depends on directory B 
# if C++ or CUDA source code in A may use names (classes and functions) 
# defined in B. If namespace level directory A depends on directory B,
# then the include.mk file in A will include the sources.mk file located
# in directory B. For example, subdirectory r1d/ depends on the util/ and
# pscf/ directories, but not on the prdc/, rpc/ or rpg/ directories.
# You can see what directories a particular namespace level directory 
# depends on by inspecting the include.mk file in that directory, which 
# contains statements that include the sources.mk files from the 
# namespace level directories on which that directory depends.
#
# Slightly different makefile pattern rules may be used for compilation 
# of source files are used in different namespace level directories. A 
# file named patterns.mk in each namespace level subdirectory of src/ 
# is a makefile fragment that defines pattern rules used for compiling 
# C++ and (when relevant) CUDA source files in that directory tree. 
#
# The pattern rules for different namespace level subdirectories of src/
# are similar except for differences in the values of two makefile
# variables named INCLUDES and DEFINES that are sometimes assigned 
# different values in different namespace level directories. 
#
# Compiling *.cpp C++ files:
# --------------------------
#
# The compiler pattern rule for compiling C++ files for each namespace 
# level subdirectory of src/ is of the form:
# 
# $(BLD_DIR)/%.o:$(SRC_DIR)/%.cpp
#      $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<
#
# This pattern compiles a *.cpp file in a subdirectory of the source
# directory $(SRC_DIR) and creates a *.o object file in a corresponding
# location in a subdirectory of the build directory, $(BLD_DIR). The 
# $(SRC_DIR) and $(BLD_DIR) are the same in the case of in-source 
# compilation. The variables used in this pattern are:
#
# CXX         - C++ compiler executable command name 
# CPPFLAGS    - options for the C/C++ preprocessor
# CXXFLAGS    - additional options used during compilation
# INCLUDES    - added directories to search for header files
# DEFINES     - options that define C preprocessor macros (-D flags)
#
# Values for the variables $(CXX), $(CPPFLAGS) and $(CXXFLAGS) are
# defined above in this main config.mk file.  The same values for these
# variables are used in all namespace level directories.
#
# The variable $(CPPFLAGS) defines flags that are used by the C/C++ 
# preprocessor. The may include the use of the -L option to add any
# directories that should always be searched for included header files.
#
# The variable $(CXXFLAGS) specify additonal flags that are used during 
# compilation of preprocessed code, and that are needed in all namespaces.
# This string always contains the $(CXX_STD) string, and may contain
# options that specify the optimization level and control warnings.
#
# The INCLUDES and DEFINES variables are assigned different values in
# different namespace level subdirectories of src/. Values for these
# variables are assigned in the patterns.mk file in each such directory.
# 
# The INCLUDES variable uses the -L option to list any additional paths 
# for header files, beyond any listed in $(CPPFLAGS). This always 
# includes the $(SRC_DIR) directory. 
#
# The DEFINES variable uses the -D option to define C preprocessor 
# macros.  This variable is not defined in this main configuration 
# file, and is assigned a different value in the patterns.mk file for 
# each namespace level directory. The C/C++ preprocessor macros are 
# used to control conditional compilation of optional features. Each 
# of these preprocessor macros has the same name as a corresponding 
# makefile variable that must be defined to enable the feature. Thus 
# for, example, if the makefile variable UTIL_DEBUG is defined to 
# enable debugging, then the DEFINES string will include a substring 
# "-DUTIL_DEBUG" that instructs the compiler to define a corresponding 
# UTIL_DEBUG C/C++ preprocessor macro which is used in the source 
# code to enable conditional compilation of some blocks of C++ code.
#
# Compiling CUDA (*.cu) source files:
# ----------------------------------
#
# Source files that contain CUDA code are indicated by a file extension
# *.cu. In namespace level directories that contain such files, the
# patterns.mk file contains a pattern rule for compiling a *.cu file to 
# create a corresponding *.o file. The rule for compiling *.cu files is 
# closely analogous to that used for *.cpp files, and is of the form:
# 
# $(BLD_DIR)/%.o:$(SRC_DIR)/%.cu
#      $(NVXX) $(CPPFLAGS) $(NVXXFLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<
#
# This contains the two new makefile variables that are analogous to 
# CXX and CXXFLAGS:
#
# NVXX        - CUDA compiler executable name (nvcc)
# NVXXFLAGS   - compiler options used during compilation
#
# The makefile variables $(CPPFLAGS) $(INCLUDES) and $(DEFINES) have
# the same meanings and values as in the rule for *.cpp files. 
#
#-----------------------------------------------------------------------
# Archiver Recipes:
#
# The PSCF build system creates a static library in each namespace
# level subdirectory of the build directory that contains object code
# created by compiling all the class source files in that directory. 
# The makefile rule to compile this library is defined in the sources.mk 
# file in the same directory. The rule for the Pscf::Fd1d namespace, as
# an example, is of the form
#
# $(AR) rcs $(r1d_LIB) $(r1d_OBJS)
#
# where $(AR) is the name of archiver command used to create a library,
# $(r1d_LIB) is an absolute path for the resulting library file and 
# $(r1d_OBJS) is a string that contains absolute paths for all of the
# *.o object files created by compiling source files in the directory
# src/r1d. Rules for other namespace level directories are analogous.
#
# The r1d/, rpc/, and rpc/ namespace level directories each contain 
# a *.cpp or *.cu main program file that contain the "main" function 
# for an associated executable program. The static libraries in these 
# directories do not contain code created by compiling that main program 
# file.
#
#-----------------------------------------------------------------------
# Linker recipes:
# 
# Executable files are created by linking a compiled main program to
# a required set of libraries. Recipes for creating executables are
# defined in namespace level makefiles. For example, the recipe for
# creating the pscf_pc executable is defined in the file rpc/makefile
# within the relevant build directory (bld/ or src/), and is of the 
# form:
#
#    $(CXX) $(LDFLAGS) -o $(PSCF_PC_EXE) $(PSCF_PC).o $(LIBS)
#
# Here $(PSCF_PC_EXE) is the path to the executable, which is a file
# named pscf_pc in the $(BIN_DIR), and $(PSCF_PC).o is the path to the 
# object file created by compiling the src/pscf/pscf_pc.cpp source 
# file that contains the main function for pscf_pc.
#
# The variable $(LDFLAGS) is a list of options passed to the compiler
# during linking. It may use the -L option to pass paths to any
# non-standard directories should be searched for library files. 
#
# The variable $(LIBS) uses the -l option to list of all the library 
# files that must be linked. For each namespace level directory, this 
# contains the static library in that directory and those in all 
# directories that it depends on. For example, in the rule to compile 
# the program pscf_1d, $(LIBS) contains paths to libraries in the util/, 
# pscf/ and r1d/ directories. The LIBS variable also lists any required 
# external libraries (e.g., GSL, FFTW, or CUDA libraries). The order in
# which libraries are listed matters - if library A uses a name that is
# defined in library B, A must appear before B in this list.
#
#=======================================================================
# Automatic dependency generation.
 
# Names of scripts invoked to compute dependencies among header files.
MAKEDEP=$(BIN_DIR)/makeDepCpp
MAKEDEP_CUDA=$(BIN_DIR)/makeDepCuda

# The files $(BIN_DIR)/makeDepCpp and $(BIN_DIR)/makeDepCuda are 
# executable python scripts that are installed in the $(BIN_DIR) by
# the configure script.  These scripts are used during compilation to 
# analyze dependencies among source and header files, and create *.d 
# dependency files. Both scripts import a python module named pscfpp.make 
# that is located in the $(ROOT_DIR)/lib/python/pscfpp directory. For 
# the python interpreter to find this, directory $(ROOT_DIR)/lib/python 
# must be in the users PYTHON_PATH environment variable.

#=======================================================================
# Include util/config.mk - this is needed to define UTIL_DEFS

include $(BLD_DIR)/util/config.mk
 
