Restricting Access to Mixture
-----------------------------

Discussion: The state of a System is now spread out over children
that include a Mixture, a Domain (including a UnitCell), and several
field containers for the w, c, h and mask fields. Write access has
been appropriately restricted for the UnitCell and other components
of the Domain, and for all of the field containers. This was done by:

  - Allowing access to the Domain only via a non-const reference or
    safe functions that modify the unit cell parameters.

  - Designing the field containers, including addition of signals,
    so that it is safe for the system to provide non-const 
    references to these via public accessor functions.

The only important child of the System that has not been protected 
from misuse is the Mixture: It is still possible for a user to 
directly call solve and compute functions for the mixture, a single 
polymer or solvent species, or or a single propagator in ways that 
would silently destroy the relationship between related variables. 

To enforce data validity, users should only be able to do basic
computations that solve the MDE and compute concentrations, or
compute stress via non-const member functions of the System, rather 
than calling member functions of the Mixture or Mixture sub-objects.
Specifically, it should be impossible for users to directly call 
any of the following functions, among others:

   - Propagator::solve
   - Block::computeConcentration(Thread|Bead)
   - Block::computeStress(Thread|Bead)
   - Polymer::compute
   - Polymer::computeStress
   - Mixture::compute
   - Mixture::computeStress

Users with access to a reference to a System do, however, need
access to some operations that change state parameters maintained
by a Mixture in order to perform Ramp and Sweep operations, and 
possibly for use by Signals.

   Modifications of Mixture needed by Sweep and Ramp:

   - Set a kuhn length (for a monomer type or block)
   - Set length of a block
   - Set size of a solvent
   - Set phi or mu for a species

   Signal:

   - clearCFields
   - clearUnitCellData

Functions called by Signal::notify:

   Note: Signals whose observers are set within the System class can call
   private member functions of System. System can pass the address of a
   private member as an argument.  This now done for allocateFieldsBasis.
   Functions that are only called by a Signal thus don't necessarily need
   to be public. There is, however, very little danger in providing public
   functions that mark data as outdated.

   Interface for signals:
       
       System::clearUnitCellData    exists (Could this be private?)
       System::clearCFields         exists (Could this be private?)
       System::allocateFieldsBasis  exists (is now private)
   
Proposal:

   1) Provide explicit interfaces for operations required by Sweep and 
   Ramp that don't require a non-const reference to the Mixture of
   Domain.  

   2) Remove the System::mixture() accessor that provides a non-const 
   reference.  Leave the accessor that returns a const reference.

   Possibility 1: Create a class SystemModifier that has non-const access 
   to the Mixture, UnitCell and Interaction.  Give it the interface shown 
   below, and make Sweep, Ramp and iterators change things through the 
   SystemModifier:

       setUnitCell(UnitCell<D>& )       -> replace System member
       setUnitCell(FSArray<double,6>& ) -> replace System member

       setKuhn(int, double) -> call Mixture::setKuhn(double, int)
       setBlockLength(int pId, int bId, double length); 
       setSolventSize(int sId, double size);
       setPolymerPhi(int pId, double phi);
       setPolymerMu(int pId, double mu);
       setSolventPhi(int pId, double mu);
       setSolventMu(int pId, double mu);

       setChi(int i, int j, double chi);

   Possibility 2: Create a MixtureModifer class that acts as a reference
   to a Mixture class that provides the functions required to modify
   parameters maintained by the Mixture. Have System return a reference
   MixtureModifier.

   Possibility 3: Just add all of these parameter modification functions 
   to the System class.

