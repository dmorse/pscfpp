
Problem: 

   How to modify classes in pscf/chem and pscf/solvers to allow
   subclasses to do complex Langevin sampling. This will require
   introduction of type WT or WType and redefining some variables 
   that are currently double to WType.

Strategy:

   Input value of phi or mu should still be real

   All internal values of phi or mu should become complex, 
       along with w, c and q fields

Directory pscf/chem:
=====================

   class Monomer (kuhn_ remains real)  - unchanged

   enumeration PolymerType (enumeration) unchanged

   class Edge - unchanged

   class Vertex - unchanged

   class EdgeIterator - unchanged

   class VertexIterator - unchanged

   class Species: Make this a template of type WType, default to double

      - Make member variables q_, phi_, and mu_ type WType

      - Create a new private variable double phiMu_, read this
        in Species::readParameters. The input parameter is real,
        but is converted to WType.
  
        bool hasPhi = readOptional(in, "phi", inputPhiMu_).isActive();
        if (hasPhi) { 
           ensemble = Species::Closed; 
           assign(phi_, phiMu_);
        } else {
           read(in, "mu", inputPhiMu_);
           assign(phi_, phiMu_);
        }

      - Make assign(WType lhs, double rhs) a pure virtual function

      - Change setPhi(double phi) and setMu(double Mu) to set
        phiMu_ as well as phi_ or mu_, using assign function

      - Add extern template declaration to Species.h for WT=double

      - Compile double type in pscf/chem/SolventSpecies.cpp

      - Compile complex types in cpc and cpg

   class SolventSpecies: 

      Make this class a template of type WT, default to double.

      No class member variables need to be changed to complex.
      No changes to class implementation appear to be necessary.

      - Add extern template declaration to Species.h for WT=double

      - Compile double types in pscf/chem/SolventSpecies.cpp

      - Compile complex types in cpc/ and cpg/
       
   class PolymerSpecies: 

      Make this class a template of type WT, default to double.

      No class member variables need to be changed to complex.
      No changes to class implementation appear to be necessary.

      - Add extern template declaration to Species.h for WT=double

      - Compile double types in pscf/chem/SolventSpecies.cpp

      - Compile complex types in cpc/ and cpg/

Directory pscf/solver (templates): 
==================================

   template <class TP> class Propagator 
   ------------------------------------

      None of the current private variables of this class template are
      type double, and none need to be generalized to WType

      Require concrete Propagator class to define a single typedef Field


   template <class TP> class BlockTmpl : public Edge
   -------------------------------------------------

      Largely unchanged

      Remove CField, WField typedefs - not needed in template

      Keep Block::Propagator, however, because this is used in PolymerTmpl

      Private member variable (all unchanged):

          Pair<Propagator> propagators_;
          typename Propagator::Field cField;
          double kuhn_;

      typename TP::Field cField_
   
   template <class Block, typename WType = double>
   class PolymerTmpl : public PolymerSpecies<WType>
   ---------------------------------------------------

      Make WT an additional template parameter

      typedef WT WType;

      Private member variable:

          DArray<Block> blocks_

      Proposal:
      
           Remove declaration and definition of the solve(double phiTot)
           function and declare this in subclass.

      Rationale: Why not define solve() in this template?

          1) The interface involves a parameter phiTot that I wouldn't 
          want to include in a complex Langevin sampling code.

          2) The implementation includes a ratio Q = Q/phiTot for which
          the operator can't be overloaded, forcing different 
          implementations just for this one operation.

