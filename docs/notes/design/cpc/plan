Design choices / conventions:
=============================

   (1) Namespaces will be named Pscf::Cpc (CPU) and Pscf::Cpg (GPU), 
   where the acronyms stand for Cpc -> complex periodic CPU and 
   Cpg -> complex periodic GPU

   (2) There will be no Basis class used in these namespaces, and thus 
   no symmetry-adapted Fourier basis avialable for use in these complex 
   codes.

   Rationale: (1) SCFT with an imposed symmetry can be done with existing
              codes. Fluctuating FTS fields don't have an exact symmetry.
              (2) The Basis class was originally designed for real fields, 
              using the indexing system for RFieldDft with implicit waves. 
              It would have to be redesigned to describe a Fourier bassis 
              for a general complex field

   (3) In Pscf::Cpc CPU code, use double and fftw_complex as basic types

   (4) In Pscf::Cpg GPU code use the cudaReal and cudaComplex as defined
   in the prdc/cuda/types.h file. 

   (5) In Pscf::Cpg namespace, allow "using namespace Pscf::Prdc" and
   "using namespace Pscf::Prdc::Cuda", so that classes defined in Prdc::Cuda
   are used by default (e.g., for RField, RFieldDft, CField, and FFT), but
   but allow use of explicity Cpu:: qualifier to specify use of classes 
   defined in Prdc::Cpu.

Programming tasks:
==================

In namespaces Prdc::Cpu and Prdc::Cuda :

  - Create class CField  (Done)

  - Create class CFieldComparison (Done)

  - Add complex transform functions to FFT classes (Done)

  - Add complex.h files to define functions for basic arithmetic
    operations for both type so of complex number (done)

In namespace Prdc:

  - In prdc/field create class template FieldIoComplex as base class
    for FieldIo classes in Pscf::Cpc and Pscf::Cpg

  - In prdc/field create class template DomainComplex as base class for
    for Domain classes in Psf::Cpc and Pscf::Cpg.  These classes will not
    contain Basis, SpaceGroup, group Name etc. 

Solvers:

  - In pscf/chem, turn Species, SolventSpecies and PolymerSpecies classes 
    into templates with template type parameter WType (type of w field)

  - Modify solver template classes (PropagatorTmpl, BlockTmpl)

  - In Cpc and Cpg, create Propagator and Block classes

  - In Cpc and Cpg, create Polymer and Mixture classes (almost unchanged)

  - Create an appropriate Interaction class (nonlocal by default)

  - Create System (Mixture, Interaction, Step) with built-in CL sampling
