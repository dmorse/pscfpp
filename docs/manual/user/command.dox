/*! \page user_command_page Command Files

 \ref user_param_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref user_field_page (Next)
<BR>

For any PSCF simulation program, the parameter file is read first, 
followed by a command file.  The name of the command file is specified 
when the program is invoked as the argument of the -c command line option.
The command file contains a sequence of commands that are read and
executed in the order in which they appear in the file. Each command
begins with a command name that is given in upper case letters.  Some
commands take one or more parameters, which must appear after the
command name on the same line, separated by whitespace.  The program 
stops execution and returns control to the operating system when it 
encounters the command name 'FINISH' on a line by itself.

Full descriptions of all of the commands used by different PSCF programs 
that are relevant to SCFT calculations given \ref scft_command_page "here".
Additional commands that are only relevant to PS-FTS calculations are 
described on a \ref psfts_command_page "separate page".

\section user_command_example_sec Example: SCFT calculation

Suppose that pscf_pc is used to perform an SCFT calculation, and is
invoked from a directory that contains a parameter file named "param" 
and a command file named "command", using the command
\code
   pscf_pc -e -p param -c command > log
\endcode
Suppose also that the working directory has subdirectories named "in" 
and "out", such that the "in" directory contains an initial w-field file 
named w.bf that is written in symmetry-adapted basis format, while all
output files are written to the "out" directory.  An example of a minimal 
command file for a SCFT calculation of a structure of specified space 
group symmetry is shown below:
\code
READ_W_BASIS    in/w.bf
ITERATE
WRITE_W_BASIS   out/w.bf
WRITE_C_RGRID   out/c.rf
FINISH
\endcode
This file would work equally well as input to the GPU accelerated
pscf_pg program, which accepts the same set of commands as pscf_pc.
This command file instructs the program to perform the following
actions:

- READ_W_BASIS: Read in an initial set of chemical potential fields
  (w-fields) from the file in/w.bf in symmetry-adapted Fourier basis
  format.

- ITERATE: Iteratively solve the SCFT problem, using the iterator
  algorithm and parameters that are specified in the parameter file.

- WRITE_W_BASIS: Write the converged chemical potential fields
  (w-fields) obtained by solving the SCFT problem to a file named
  out/w.bf in symmetry-adapted basis format.

- WRITE_C_RGRID: Write the corresponding monomer concentration fields
  (c-fields) to a file out/c.rf in r-grid format, in which field
  values are given as values of nodes of a real-space grid.

- FINISH: stop execution

The FINISH command is always the last command that is read in a command
file, and causes execution of the program to halt.

In this example, w-fields are both read and written in basis format,
using the commands READ_W_BASIS_and WRITE_W_BASIS. This is typical for
SCFT calculations that are performed on a single unit cell of a structure
of specified space group symmetry. The final monomer concentration
fields have, however, been written in r-grid format, using the command
WRITE_C_RGRID. Use of r-grid format for the c fields allows the such
files to be used as inputs to the POLYMER VISUAL program to be
visualized.

\section user_command_path_sec Use of file name prefixes

Many commands require the names of input or output files as arguments.
By default, file names are interpreted as paths that are defined relative
to the current working directory, i.e., relative to the directory from
which the program executable was invoked. File name paths that appear
in the command file may include names of subdirectories of this directory
and path separator slash characters, as done in the above example.

This default behavior may, however, be modified by using the "-i"
and "-o" \ref user_usage_page "command line options" to automatically
add prefixes to paths for input and output files.

<b> Example (revisited) </b>: The command file in the above example was
designed for a case in which pscf_pc or pscf_pg is invoked without using
the -i or -o command line options. Suppose that the program had instead
been invoked using these options to specify prefixes of "in/" and "out/",
e.g., as \code
 > pscf_pc -d 3 -p param -c command -i in/ -o out/ -e > log
\endcode
The corresponding command file would then have been written in a form
\code
READ_W_BASIS    w.bf
ITERATE
WRITE_W_BASIS   w.bf
WRITE_C_RGRID   c.rf
FINISH
\endcode
In this modified version, the names of the input and output files that
appear in the command file do not include explicit "in/" and "out/"
subdirectory names. Instead, the prefix "in/" that was given as an argument
to the "-i" command line option is automatically prepended to the name
given for any input file in the parameter or command file, while the
prefix "out/" is prepended to the name of any output file.

Note that, if a prefix is used to specify a subdirectory path for
input or output files, as in this example, then the prefix string must
include a trailing backlash character, as done for the string "in/"
and "out/" in the above example. Also note that input and output
prefixes defined by the -i and -o command line options are not applied
to the names of the parameter and command file that are specified as
arguments of the -p and -o command line options.

 <BR>
 \ref user_param_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref user_page         (Up) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref user_field_page (Next)
*/
