/*! \page user_usage_page Running a Program

\ref user_files_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_calculation_page (Next)
<BR>


All PSCF executable programs are designed to be run from a unix command line,
and all have a similar command line interface. The names of the required
parameter and command files are passed to the program as arguments of the
"-p" and "-c" command line options, respectively.  Names of other input and
output files are provided as arguments to commands in the command file.

\section user_usage_example_sec Examples

<b> pscf_1d </b>:
As a first example, consider use of the program pscf_1d, which is used
to simulate problems in which the fields depend on a single coordinate.
To run this program using a parameter file named "param" and command
file named "commands" that are both in the current working directory,
one would enter
\code
   pscf_1d -p param -c commands
\endcode

<b> pscf_pc and pscf_pg</b>:
The syntax to invoke either the pscf_pc or pscf_pg programs for periodic
microstructures is similar, but requires that parameter also pass the
spatial dimensionality as a parameter of the -d option. For example,
to use pscf_pc to perform a calculation involving a three-dimensional
periodic microstructures, one could enter
\code
   pscf_pc -d 3  -p param -c commands
\endcode
The command line interface for pscf_pg is identical to the interface
for pscf_pc.

<b> Redirecting log output </b>:
During execution, some information is written to standard output, which
outputs to a terminal by default. This log output can be re-directed to
a file by using the unix ">" output redirect operator. For example, the
command
\code
  pscf_pc -d 3 -p param -c commands > log
\endcode
would direct standard output to a file named "log" in the current working
directory.  Standard output should normally be redirected to a file when
a job is run in background or in a queue on a shared computing cluster.

\section user_usage_echo_sec Echoing the parameter file

All PSCF programs accept a command line option "-e" that causes the
contents of each line of the parameter file to be echoed to standard output
while the parameter file is being read. For example, to invoke pscf_pc
with echoing of the parameter file to a log file, one could enter
\code
   pscf_pc -d 3 -p param -c commands -e > log
\endcode
The -e "echo" option is very useful for locating syntax errors in the
parameter file.  When an error is detected while reading a parameter file,
the echoed output ends immediately before the line at which the error is
detected, and is followed by an error message that contains information
about the nature of the error.

PSCF parameter files have a relatively rigid format in which elements
must appear in a particular order, and in which every element is preceded
by a label string that gives the name of a parameter or a block of
parameters.  During processing of the parameter file, the program reads
each such label and compares it to a label that it expects to appear next
in the file, or to a list of valid possibilities. Error messages that are
generated in response to parameter file syntax errors output both the
label string that was actually read from file and information about
what was expected. When echoing is turned on, these error messages often
provide enough information to allow a user to rapidly understand and fix
any such errors.

\section user_usage_options_sec Command line options

The table shown below lists all command line options accepted by PSCF
programs. The second column, which describes the option parameter, is
left empty for options that do not take a parameter.  All but one of the
options listed below can be used with any of the three PSCF programs.
The only exception to this is the -d option, which is a required input
to the pscf_pc and pscf_pg programs, but is not a valid option for
pscf_1d.
<table>
  <tr>
     <td> <b> Option </b> </td>
     <td> <b> Parameter </b> </td>
     <td> <b> Description </b> </td>
  </tr>
  <tr>
     <td> -d </td>
     <td> dimension </td>
     <td> spatial dimensionality 1, 2, or 3 (required for pscf_pc and pscf_pg) </td>
  </tr>
  <tr>
     <td> -p </td>
     <td> filename </td>
     <td> Name of the parameter file (required) </td>
  </tr>
  <tr>
     <td> -c </td>
     <td> filename </td>
     <td> Name of the command file  (required) </td>
  </tr>
  <tr>
     <td> -e </td>
     <td>    </td>
     <td> Activates echoing of parameter file to standard output (optional)
     </td>
  </tr>
  <tr>
     <td> -i </td>
     <td> prefix </td>
     <td> string that is prepended to the names (paths) for all input
     data files (optional) </td>
  </tr>
  <tr>
     <td> -o </td>
     <td> prefix </td>
     <td> string that is prepended to the names (paths) for all output
     data files (optional) </td>
  </tr>
</table>
The -p and -c options are required, while the -e, -i, -o options are
not.  The -d option only exists for the pscf_pc and pscf_pg programs,
and is required by those two programs. The -e option does not take a
parameter.

\section user_usage_prefixes_sec File name prefixes

The -i and -o command line options allow the user to specify standard
prefix strings that should be prepended to the names of input and output
files, respectively, that appear in the parameter and command files.
The "prefix" parameter of the -i or -o option is often used to specify
a directory for input or output files. To do so, set the value of this
parameter to the name of a directory, terminated by a directory separator
charactor "/", giving a prefix string such as "in/" or "out/".  These
prefix strings are prepended verbatim to names of input and output files
that are specified in the command or parameter file. The input prefix (if
any) is not, however, added to the names of the parameter and command
files that are given in the command line.

<em> Example </em>:
The command
\code
   pscf_pc -d 3 -e -p param -c commands -i in/ -o out/ > log
\endcode
would run the pscf_pc program using a parameter file named "param" and
a command file named "commands" in the current working directory, while
echoing the parameter file, reading all input files other than the
parameter and command files from subdirectory of the current working
directory named "in", and writing all output files to a subdirectory
named "out".

<BR>
\ref user_files_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_page (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_calculation_page (Next)

*/
