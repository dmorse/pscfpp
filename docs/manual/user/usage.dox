/*! \page user_usage_page Running a Program

\ref user_files_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_calculation_page (Next)
<BR>


All of the PSCF programs are designed to be run from a unix command line,
and all have a similar command line interface. The names of the parameter
and command files required to perform a computation are passed to the the
program as arguments of the "-p" and "-c" command line options, respectively.
Names of other input and output files are provided as arguments to commands
in the command file.

\section user_usage_example_sec Example

As an example, consider use of the program pscf_1d, which is used to
simulate problems in which the fields depend on a single coordinate.
To run this program using a parameter file named "param" and command
file named "commands" that are both in the current working directory,
one would enter
\code
   pscf_1d -p param -c commands
\endcode
The syntax to invoke the pscf_pc and pscf_pg programs for periodic
microstructures is similar, but requires that parameter also pass the 
spatial dimensionality as a parameter of the -d option. For example,
to use pscf_pc to perform a calculation involving a three-dimensional 
periodic microstructures, one would enter
\code
   pscf_pc -d 3  -p param -c commands
\endcode
The command line interface for pscf_pg is identical to the interface
for pscf_pc. 

During execution, some log information is written to standard output,
which outputs to a terminal by default. This log output can be re-directed
to a file by using the unix ">" output redirect operator. For example,
the command
\code
  pscf_pc -d 3 -p param -c commands > log
\endcode
would direct standard output to a file named "log" in the current working
directory.  Standard output should normally be redirected to a file when
a job is run in background or in a queue.

\section user_usage_echo_sec Echoing the parameter file

All PSCF programs accept a command line option "-e" that causes the
contents of each line of the parameter file to be echoed to standard
output while the parameter file is being read. For example, to invoke
pscf_pc with echoing of the parameter file to a log file, one could 
enter
\code
   pscf_pc -e -d 3 -p param -c commands > log
\endcode
The "echo" option is very useful for locating errors in the parameter 
file.  When an error is detected while reading a parameter file, the 
echoed output ends immediately before the line at which the error is 
detected, and is followed by an error message with any avaiable 
information about the nature of the error.

PSCF parameter files are fixed-format files in which every element is 
preceded by a label string that gives the name of a parameter or a block 
of parameters. During processing of the parameter file, the program reads 
each such label and compares it to a label that it expects to appear next 
in the file. Error messages that are generated in response to parameter 
file syntax errors output both the expected label string and the label 
string that was actually read from file. This error message is usually 
enough to allow a user to identify and fix such an error.

Another advantage of using the echo option is that it creates an output
that indicates the existence of optional elements that are allowed by 
the parameter file format but that were omitted in a particular 
parameter file. If an optional parameter or subblock is omitted, the 
label of the omitted element is echoed to standard output followed by 
the string "[absent]". The inclusion of omitted optional elements in
the echoed output may help users more quickly become familiar with the
full format of each parameter file block, including optional elements 
that are omitted from some examples.

\section user_usage_options_sec Command line options 

The table shown below lists all command line options accepted by PSCF
programs. The second column, which describes the option parameter, is
left empty for options that do not take a parameter.  All but one of 
the options listed below can be used with any of the three PSCF programs. 
The only exception to this is the -d option, which is a required input
to the pscf_pc and pscf_pg programs, but is not a valid option for 
pscf_1d.
<table>
  <tr> 
     <td> <b> Option </b> </td>
     <td> <b> Parameter </b> </td>
     <td> <b> Description </b> </td>
  </tr>
  <tr> 
     <td> -d </td>
     <td> dimension </td>
     <td> spatial dimensionality 1, 2, or 3 (required for pscf_pc and pscf_pg) </td>
  </tr>
  <tr> 
     <td> -p </td>
     <td> filename </td>
     <td> Name of the parameter file (required) </td>
  </tr>
  <tr> 
     <td> -c </td>
     <td> filename </td>
     <td> Name of the command file  (required) </td>
  </tr>
  <tr> 
     <td> -i </td>
     <td> prefix </td>
     <td> string that is prepended to the paths for all input data 
     files (optional) </td>
  </tr>
  <tr> 
     <td> -o </td>
     <td> prefix </td>
     <td> string that is prepended to the the paths for 
     all output data files (optional) </td>
  </tr>
  <tr> 
     <td> -e </td> 
     <td>    </td>
     <td> Activates echoing of parameter file to standard output (optional) 
     </td>
  </tr>
</table>
The -p and -c options are required, while the -i, -o and -e options 
are optional.  The -d option only exists for the pscf_pc and pscf_pg 
programs, and is required for those programs. The -e option does not
take a parameter.

The "prefix" parameter of the -i or -o option is often used to specify
a directory for input or output files. To do so, set the value of this
argument to the name of a directory, terminated by the directory 
separator charactor "/", giving a string such as "in/" or "out/".  
These prefix strings are prepended verbatim to names of input and output 
files that are specified as parameters in the command or parameter file.
No such prefix is added to the names of the parameter and command files 
that are specified in the program command line.

<em> Example </em>:
The command
\code
   pscf_pc -d 3 -e -p param -c commands -i in/ -o out/ > log
\endcode
would run the pscf_pc using a parameter file named "param" and a 
command file named "commands", while echoing the parameter file during
initialization, writing all output files to subdirectory "out/" of the 
current working directory, and reading all input files other than the 
parameter and command files from subdirectory "in/".

<BR>
\ref user_files_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_page (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref user_calculation_page (Next)

*/
