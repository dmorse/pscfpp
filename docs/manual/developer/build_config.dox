/*! \page developer_build_config_page Build Configuration (config.mk) Files

\ref developer_build_files_page  (Prev)
\ref developer_build_source_page  (Next)
<BR>

After the configure script is src and bld directories will each contain 
a makefile fragment named config.mk that is created by the configure 
script.  These are files that define and assign values to a variety of 
makefile variables that are needed throughout the build system, and that 
are included verbatim by other makefiles. Default versions of these two
build configuration files are installed by the configure script, and may
be modified by users if needed.

The config.mk configuration file in each build directory (i.e., in the 
src or bld directory) is included in every other makefile in the same 
build directory tree. The config.mk file in the src directory is thus 
included by all makefiles in the src directory tree, but not those in 
the bld directory, and so only affects in-source builds that are
performed by calling make from within the src directory.  Conversely, 
the config.mk file in the bld directory is included by all makefiles 
in the bld directory tree, but not those in the src directory, and so 
only affects out-of-source builds.


Most of the variables defined in the src/config.mk and bld/config.mk
files fall into one of the following three categories, each of which
is discussed in more detail below:

   - **Directory path variables:** The variables ROOT_DIR, SRC_DIR,
     BLD_DIR, and BIN_DIR specify absolute paths to the PSCF root 
     directory and several of its subdirectories, as discussed in 
     a previous manual page.

   - **Variables that enable optional features:** The variables
     UITL_DEBUG and PSCF_CUDA control whether or not particular
     optional features are enabled when PSCF is compiled, as
     discussed here.

   - **Variables used in makefile rules**: A variety of variables
     such as CXX, CPP_FLAGS, CXX_FLAGS, LD_FLAGS are used in the
     pattern rules for compilation of individual source files and
     the rules for creation of libraries and executable files.

The config.mk files contain extensive comments that explain the meaning 
and usage of most of the variables that are defined in those files. We 
thus recommend that users who are interested in understanding details 
of how the build system works skim the notes given in either of these
config.mk files, in addition to reading the relevant parts of this 
web manual. 

The config.mk files that are created by the configure script in the 
src and bld directories are nearly identical except for the value of 
the variable BLD_DIR, which gives the path to the build directory. In
each of these files, the value of BLD_DIR is set to absolute path to
directory that contains the config.mk file, i.e., to the path to the 
bld directory withinin the config.mk file in the bld directory or to
the path to the src directory within the config.mk the src directory.
This small difference allows the system to perform in-source builds 
when make is invoked from within the src directory and out-of-source 
builds when make is invoked from within the bld directory.

\section developer_build_config_dirvars_sec Directory path variables

Among the makefile variables defined in the config.mk file in each build 
directory are several variables whose values give paths to the PSCF root 
directory and several of its subdirectories. The names and meanings of 
the most important such path variables are listed below:
<table>
<tr>
  <th> Name </th>
  <th> Meaning </th>
</tr>
<tr>
  <td> ROOT_DIR </td>
  <td> Path to PSCF root directory </td>
</tr>
<tr>
  <td> SRC_DIR </td>
  <td> Path to the source directory </td>
</tr>
<tr>
  <td> BLD_DIR </td>
  <td> Path to the build directory </td>
</tr>
<tr>
  <td> BIN_DIR </td>
  <td> Path to directory for installing executables </td>
</tr>
</table>
The values assigned to all of these variables are absolute paths.
On any unix-like system, the first character of an absolute path 
is a backslash ("/") character that represents the root of the 
computer filesystem.  The value of the ROOT_DIR variable is set by 
the configure script to be the absolute path to the root directory 
as of the time that the configure script was run.  Values of other 
variables are using knowldedge of ROOT_DIR, as discussed below.

As an example, suppose that a user with user name smith has a home
directory /users/smith, and suppose that this user has installed the 
PSCF root directory as a subdirectory of their home directory, as 
/users/smith/pscfpp. In this case, the relevant part of the config.mk 
file would look like this after the configure script has been run:
\code
ROOT_DIR=/users/smith/pscfpp
SRC_DIR=$(ROOT_DIR)/src
BLD_DIR=$(ROOT_DIR)/bld
BIN_DIR=$(ROOT_DIR)/bin
\endcode
The symbols $(ROOT_DIR) represents the value of the makefile variable
ROOT_DIR, which is given here by /usrs/smith/pscfpp.  The config.mk 
file in the bld directory is only included by makefiles in the bld 
directory, and is only used during an out-of-source build. This file
file thus declares $(ROOT_DIR)/bld to be the build directory in which 
all intermediate files should be placed.

The corresponding variable definitions in the config.mk file in the
src directory in this example would be almost identical to those
shown above, *except* for the value assigned to the variable BLD_DIR: 
In the file src/config.mk, BLD_DIR would be assigned a value 
\code
BLD_DIR=$(ROOT_DIR)/src
\endcode
rather than $(ROOT_DIR)/bld.  The config.mk file in the src directory
is used only for in-source compilation, and so declares the src 
directory to be the build directory in which intermediate files will
be placed. 

Users can, if desired, change the location in which executable files 
are installed by using an text editor to change the value assigned 
to BIN_DIR within either or both of these configuration files. The 
executable files produced by PSCF are self-contained, however, and may 
thus also simply be moved to a new location after they are created. 

If the name or location of the PSCF root directory is changed after the 
configure script has been run, users will need to rerun the configure 
script. This is necessary to reset the value of the makefile variable 
ROOT_DIR to the correct location. If the root directory is moved after 
executables have been created, users will need to first rerun the 
configure script and then also recompile PSCF. Recompilation is necessary 
after the root directory is moved because some executables contain 
hard-coded paths to data files that are located in within the PSCF 
root directory tree. Specifically, the pscf_pc and pscf_pg executables
access files in the directory data/groups that contain symmetry elements 
for crystallographic space groups, and the path used for the data/
directory is generated by the configure script.

\section developer_build_config_features_sec Variables that enable features

The variables UTIL_DEBUG and PSCF_CUDA are each used to control whether
a specific feature is enabled or disabled when the PSCF is compiled. 
Defining UTIL_DEBUG enables a set of optional run-time checks that may
be useful for finding or analyzing errors, at a slight cost in execution
speeed.  Defining PSCF_CUDA enables compilation of code that uses an 
NVIDIA GPU, and creation of the pscf_pg executable.

The config.mk code contains two statements that can each be used to 
define one of these variables and assign it a default value, in order 
to enable the associated feature, or that can be commented out in order 
disable the associated feature. Lines in makefiles may be commented out 
by placing a \# at the beginning of the line. The lines that define these
two variables are commented out by default, so both of these features 
are disabled by default. 

The debugging and CUDA features may also be enabled or disabled by
using the -d or -c options of the setopts script, respectively. The 
setopts script actually operates by commenting out or uncommenting 
the appropriate lines of the appropriate config.mk file.

\section developer_build_config_rules_sec Variables used in makefile rules

A variety of other makefiles variables defined in the config.mk file are 
designed to be used in different types of makefile rules that provide 
instructions for compiling source files to create object files, creating 
static libraries, and creating executable files. The names and purposes 
of most such variables are described in comments within each config.mk 
file, as well as in the discussion in subsequent manual pages of various 
types of makefile rules that are defined in 
\ref developer_build_source_page "source list files",
\ref developer_build_pattern_page "pattern rule files", and
\ref developer_build_makefile_page "makefiles".


<BR>
\ref developer_build_files_page (Prev)
\ref developer_build_page            (Up)  &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_source_page (Next)

*/
