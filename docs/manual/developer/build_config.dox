/*! \page developer_build_config_page Build Configuration (config.mk) Files

\ref developer_build_dependency_page  (Prev)
\ref developer_build_makefile_page  (Next)
<BR>

After the configure script is run, the src, bld, and util directory will 
each contain a makefile fragment named config.mk that is created by the 
configure script.  These are files that define and assign values to a 
variety of makefile variables that are needed throughout the build 
system, and that are included verbatim by other makefiles. Default 
versions of these three build configuration files are installed by the 
configure script.  Configuration may be modified by the user, either by 
manually editing them or by using the setopt script to enable, disable 
or modify definitions of specific variables from the command line.

The config.mk files in the src and bld directories are nearly identical 
files that contain code to assign values to the same set of variables, 
with equal default values for most all variables.  One important 
variable that is treated differently in these files by default is the 
variable BLD_DIR, which is assigned different values in src/config.mk 
and bld/config.mk in order to enable users to perform either 
out-of-source or in-source builds.

Most of the variables defined in the src/config.mk and bld/config.mk
files fall into one of the following three categories:

   - **Directory path variables:** The variables ROOT_DIR, SRC_DIR,
     BLD_DIR, and BIN_DIR specify absolute paths to the PSCF root 
     directory and several of its subdirectories, as discussed in 
     a previous manual page.

   - **Variables that enable optional features:** The variables
     UITL_DEBUG and PSCF_CUDA control whether or not particular
     optional features are enabled when PSCF is compiled, as
     discussed here.

   - **Variables used in pattern rules**: A variety of variables
     such as CXX, CPP_FLAGS, CXX_FLAGS, LD_FLAGS are used in the
     pattern rules for compilation of individual source files.

The meaning and usage of many of the variables defined in the these 
two very similar files is discussed in extensive comments within 
these files, as well as in the discussion of pattern rules given below.

The config.mk configuration file in each build directory (i.e., in the 
src or bld directory) is included in every other makefile in the same 
build directory tree. The config.mk file in the src directory is thus 
included by all makefiles in the src directory tree, but not those in 
the bld directory, and so only affects in-source builds that are 
performed by calling make from within the src directory.  Conversely, 
the config.mk file in the bld directory is included by all makefiles 
in the bld directory tree, but not those in the src directory, and so 
only affects out-of-source builds.

\section developer_directory_dirvars_sec Directory path variables

Among the variables defined in the config.mk file in each build 
directory are makefile variables whose values give paths to the PSCF 
root directory and several of its subdirectories. The names and 
meanings of the most important such path variables are listed below:
<table>
<tr>
  <th> Name </th>
  <th> Meaning </th>
</tr>
<tr>
  <td> ROOT_DIR </td>
  <td> Path to PSCF root directory </td>
</tr>
<tr>
  <td> SRC_DIR </td>
  <td> Path to the source directory </td>
</tr>
<tr>
  <td> BLD_DIR </td>
  <td> Path to the build directory </td>
</tr>
<tr>
  <td> BIN_DIR </td>
  <td> Path to directory for installing executables </td>
</tr>
</table>
The values assigned to all of these variables are absolute paths.
On any unix-like system, the first character of an absolute path 
is a backslash ("/") character that represents the root of the 
computer filesystem.  The value of the ROOT_DIR variable is set by 
the configure script to be the absolute path to the root directory 
as identified by this script at the time that the configure script 
was run.  Values of other variables are defined using the value of 
ROOT_DIR, as discussed below.

As an example, suppose that a user with user name smith has a home
directory /users/smith, and suppose that this user has installed
the PSCF root directory as a subdirectory of their home directory,
as /users/smith/pscfpp. In this case, the part of the config.mk file
that is located in the users bld directory that defines these
path variables would look like this after the configure script has
been run:
\code
ROOT_DIR=/users/smith/pscfpp
SRC_DIR=$(ROOT_DIR)/src
BLD_DIR=$(ROOT_DIR)/bld
BIN_DIR=$(ROOT_DIR)/bin
\endcode
The symbol $(ROOT_DIR) represents the value of the makefile variable
ROOT_DIR, which is given here by the string /usrs/smith/pscfpp.
The config.mk file in the bld directory is only included by
makefiles in the bld directory, and is only used during an
out-of-source build that is performed by invoking make from within
the PSCF root directory or the bld directory. This configuration
file thus declares $(ROOT_DIR)/bld to be the build directory in
which all intermediate files should be placed.

The corresponding variable definitions in the config.mk file in the
src directory in this example would be almost identical to those
shown above, *except* for the value assigned to the variable BLD_DIR: 
In the file src/config.mk, BLD_DIR would be assigned a value 
$(ROOT_DIR)/src rather than $(ROOT_DIR)/bld. In both cases, the
value of BLD_DIR is an absolute path to the directory that contains
the config.mk file This configuration file thus declares the build 
directory BLD_DIR used during in-source-bld is the same as the
src directory.

Users can, if desired, change the location in which executable files 
are installed by using an text editor to change the value assigned to 
BIN_DIR within either or both of these configuration files. The 
executable files produced by PSCF are self-contained, however, and may 
thus also simply be moved to a new location after they are created. 

If the name or location of the PSCF root directory is changed after the 
configure script has been run, users will need to rerun the configure 
script. This is necessary to reset the value of the makefile variable 
ROOT_DIR to the correct location. If the root directory is moved after 
executables have been created, users will need to first rerun the 
configure script and then also recompile PSCF. Recompilation is necessary 
after the root directory is moved because some executables contain 
hard-coded paths to data files that are located in within the PSCF 
root directory tree. Specifically, the pscf_pc and pscf_pg executables
access files in the directory data/groups that contain symmetry elements 
for crystallographic space groups, and the path used for the data/
directory is generated by the configure script.

<BR>
\ref developer_build_dependency_page (Prev)
\ref developer_build_page            (Up)  &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_makefile_page (Next)

*/
