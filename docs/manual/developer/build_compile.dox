/*! \page developer_build_compile_page Basics: Compiling 

\ref developer_build_overview_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_add_page  (Next)
<BR>

This page briefly explains how to compile either the entire PSCF package 
or a subset of the source code files within PSCF. The discussion assumes
familiarity with the contents of the 
\ref developer_build_overview_page "previous page".

\section developer_build_compile_all_page Compiling with "make all"

To compile a set of PSCF source files, one generally must invoke the 
command "make all" from a working directory within either the src or bld 
directory tree.  The choice of which source files will be compiled, and 
whether they are compiled in-source or out-of-source, is determined by 
the location of the working directory from which "make all" is invoked.  

Invoking "make all" from within src directory tree results in in-source 
compilation, while invoking it from within the build directory results 
in out-of-source compilation.  Invoking "make all" from the root of the 
src directory tree causes the build system to perform an in-source 
build of the entire package.  Invoking "make all" from the root of the 
bld directory tree instead causes the build system to perform an 
out-source-build of the entire PSCF package. Invoking "make all" from
the PSCF root directory also causes out-of-source compilation of the 
entire package.

The "make all" command can also be invoked from subdirectories of the 
src directory in order to perform in-source compilation of a subset of 
the PSCF source files.  Invoking "make all" from almost any subdirectory 
of the src directory tree causes in-source compilation of all of the 
*.cpp and *.cu source code files in the tree rooted at that directory. 
The only exception to this is the src/test directory, which contains 
header files for a unit test framework, and does not contain a makefile.  
During work on PSCF, a developer can thus edit a few files in a lower 
level subdirectory within the src directory tree, exit the editor, and 
then invoke "make all" from within the same directory to re-create any 
object files in that directory that depend on the files that were just 
changed.  For reasons that are explained below, this usage will not 
cause any unnecessary re-building of object files that were already 
up to date, and can be used as an efficient workflow.

The "make all" command can also be invoked from namespace level 
subdirectories of the bld directory tree directory. Doing so causes 
out-of-source compilation of source code files in the corresponding 
namespace level directory within the src directory tree.  The "make" 
command cannot, however, be invoked from lower-level subdirectories 
of the bld directory tree (because these do not contain makefiles).

When "make all" is invoked from a namespace level directory of either 
the src or bld directory, the static library (*lib.a) file associated 
with that directory is also created or updated if required to keep 
the library file up to date.  

\section developer_build_compile_workflow_page Development workflows

When working on PSCF, developers may go through a cycle in which they
repeatedly edit one or two files, then invoke "make all" from the same
directory to compile the resulting modified files, then go back to 
editing. A new developer might reasonably ask if the repeated use of 
"make all" in this workflow causes unnecessary recompilation of source
files that have not changed. It does not, because the build system is
designed to automatically keeps track of which files are out of date,
and only recreates an existing object file if it determines that it
has become out-of-date because of changes in its "pre-requisite" files
(i.e., the source file or files that are directly or indirectly 
included into the source file). The mechanism used to do this are
described in detail in subsequent pages. 

Some developers who have worked with makefile systems for other packages
may be tempted to try to explicitly re-create a single object file by 
giving the name of the object file as a target (i.e., command line 
argument) of the "make" command. This generally does not work as 
intended for PSCF unless you give the path to the object file as an 
absolute path, defined relative to root of the entire filesystem. For 
example, imagine that you want to explicitly rebuild the object file 
src/pscf/chem/Monomer.o within a PSCF root directory named pscfpp that 
is located in the home directory of a user named "smith", for which 
/users/smith is the absolute path to the user home directory. You could 
do this by typing the command
\code
   make /users/smith/pscfpp/src/pscf/chem/Monomer.o
\endcode
from with the src, src/pscf, or src/pscf/chem directory. Simply typing 
"make Monomer.o" from within the src/pscf/chem directory, however, 
would fail. The full path is required for this purpose because the 
PSCF makefile system stores all paths of object files and prerequisite
source code files internally as absolute paths, and the "make" command 
generally will not recognize a relative path such as "Monomer.o" as a 
synonynm for the corresponding absolute path. Consistent use of the
"make all" command avoids the need to type out long absolute paths.

\section developer_build_compile_clean_page Cleaning up

Invoking the command "make clean" from any working directory in the src 
or bld directory tree that contains a makefile will remove all of the 
object, dependency and intermediate files that would be created by 
invoking "make all" from the same directory. Invoking "make clean" from 
the PSCF root directory removes intermediate files from both the bld 
and src directories. The  "make clean" command does not, however, 
remove the final executable files that are installed in the bin 
directory, and does not remove any files that are created by the 
configure script.

Invoking the command "make veryclean" from the pscfpp root directory
removes all of the intermediate files that would be removed by the
"make clean" command, and also removes executable files and any files 
that were created by the configure script. The "make veryclean" command 
can thus return a repository to a state similar to that obtained 
immediately after the repository was created by cloning the pscfpp 
github repository.

<BR>
\ref developer_build_overview_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_page           (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_add_page       (Next)

*/
