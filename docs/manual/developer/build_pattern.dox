/*! \page developer_build_pattern_page Pattern Rule (patterns.mk) Files

\ref developer_build_dependency_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_makefile_page (Next)
<BR>

Each namespace level subdirectory of the src/ directory has a makefile
fragment named "patterns.mk". This file defines pattern rules for compiling 
*.cpp and *.cu source files in that directory or namespace.  These pattern 
rules have the same structure in all six namespace level directories. 

The patterns.mk file in each namespace level source directory contains
a pattern rule for compiling C++ source files with extension .cpp that 
always looks like this:
\code
$(BLD_DIR)/%.o:$(SRC_DIR)/%.cpp
        $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<
ifdef MAKEDEP
        $(MAKEDEP) $(MAKEDEP_CMD) $(MAKEDEP_CXX_ARGS) $<
endif
\endcode
In directories that contain CUDA C++ source files, indicated by an file 
name extension *.cu, the patterns.mk file also contains an analogous 
pattern rule for compiling these files, which uses the NVidia CUDA 
compiler rather than a C++ compiler.  Both of the patterns creates rules 
for creating an object file with file extension *.o in a subdirectory of 
the build directory \$(BLD_DIR) by compiling a *.cpp or *.cu source file 
with the same base name in the corresponding subdirectory of the source 
directory \$(SRC_DIR). 

In these pattern rules, the symbol \% is a wildcard that represents a 
string that appears in the path for the target file that may also appear 
in one or more pre-requisites.  The rule shown above thus describes how 
to create a target object file in the build directory with a path of the 
form \$(BLD_DIR)\%.o by compiling a corresponding source file in the 
source directory with a path of the form \$(SRC_DIR)/\%.cpp, in which 
\% represents the common part of the two paths. The common part of these 
paths may include one or more directory separator symbols and the name or 
names of subdirectories of the src directory, as well as the base file 
name. In order for this pattern rule to work correctly for out-of-source 
builds, the PSCF bld directory must have the same internal directory 
structure as the src directory.
 
The recipe for this rule contains two lines with different purposes.
The first line of the recipe actually calls the compiler command, 
represented by the value of the variable \$(CXX), to compile the source 
file and create the object file.  This second line calls a script, whose 
name is given by the variable value \$(MAKEDEP), that creates a 
corresponding dependency file with extension .d.  The second line is 
contained within a makefile ifdef construct that executes the second 
line if and only if the makefile variable MAKEDEP is defined (which it 
normally is).  Note that the dependency file associated with each target 
object file is created as a side-effect of compilation, and so only 
exists after the first time the object file is compiled.

\section build_pattern_compile Compilation
 
The following makefile variables are used in the first line of the 
recipe to define a rule for compiling a source file:

   - BLD_DIR: Absolute path to the build directory
   - SRC_DIR: Absolute path to the pscfpp/src directory
   - CXX: name of the C++ compiler executable
   - CPPFLAGS: flags for the C preprocessor
   - CXXFLAGS: general flags for the C++ compiler (optimization, warnings, 
     etc.)
   - INCLUDES: directories to search for C++ header files, using the -I 
     compiler option
   - DEFINES: String of any C++ preprocessor macro definitions

Values for the variables BLD_DIR, SRC_DIR, CXX, CPPFLAGS, CXXFLAGS and
INCLUDES are all defined in the main config.mk configuration file, 
which is located in the root of the build directory. 

The DEFINES variable, if not empty, contains a series of preprocessor
macro definitions that are defined using the "-D" compiler option. 
These can be used by the C/C++ preprocessor to conditional compilation 
of some features. Thus, for example, if both debugging and CUDA 
compilation are enabled, the value \$(DEFINES) within the file 
src/pscf/patterns.mk might expand to 
\code
$(DEFINES) => -DUTIL_DEBUG -DPSCF_CUDA
\endcode
The DEFINES variable is assigned a value in the patterns.mk files of 
each namespace level subdirectory of src/, and is assigned slightly 
different values in different directories. Which values assigned are
to the DEFINES variable may depend on values of variables defined in 
the main config.mk

\section build_pattern_compile Dependency file creation

The variables MAKEDEP, MAKEDEP_CMD, and MAKEDEP_CXX_ARGS are used only in 
the second line of this recipe, in order to construct a *.d dependency 
file.

The value of MAKEDEP is the absolute path of an executable script that 
is used to generate dependency files for C++ files. The value of this 
variable is assigned in the main config.mk configuration file in the 
build directory, and is assigned a value $(BIN_DIR)/makeDepCpp by default. 
If no value is assigned to MAKEDEP, generation of dependency files is 
suppressed.

The value of MAKEDEP_CMD is the name of a compiler command and compiler 
options required to use a compiler to generate a list of pre-requisites
of a C++ by analyzing preprocessor \#include directives. The specified
compiler command is called internally by the makeDep script to generate 
a list of dependencies. The MAKEDEP script then does some further 
manipulation to convert paths that are reported by the compiler as 
relative paths into absolute paths. The variable MAKEDEP_CMD is assigned 
a value in the main config.mk file, where it is set to "-C$(CXX) -MM -MF" 
by default.

The value of MAKEDEP_CXX_ARGS is a string of other arguments required 
by the MAKEDEP script when used to process for C++ files. An analogous 
argument named MAKEDEP_CUDA_ARGS is used in other namespace level 
directories in pattern rules for C++ CUDA files.

<BR>
\ref developer_build_dependency_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_page            (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_makefile_page   (Next)

*/
