/*! \page developer_build_dependency_page Dependency (*.d) Files

\ref developer_build_source_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_pattern_page (Next)
<BR>

The pattern rules used by PSCF to create an object file target by 
compiling a source file with file extension .cpp or .cu create both
an object file with file extension .o and a corresponding dependency 
file with file extension *.d.  The resulting dependency file defines 
a makefile rule that lists all of the source files that are prerequisites 
of the resulting object file.  The pre-requisites of an object file are 
the files that are combined by the C preprocessor to create the 
translation unit that is compiled to create that object file.  These 
prerequisites include both the associated *.cpp source file and all 
of the *.h header files and (sometimes) *.tpp template implementation 
files that were directly or indirectly included into that file via
preprocessor \#include directives.

\section developer_build_dependency_rule_sec The makefile rule 

The dependency file associated with an object file named Class.o defines 
a makefile rule that, is simplified form, might look something like this:
\code

Class.o: Class.cpp Class.h Header1.h Header2.h ....

\endcode
Here, Header1.h, Header2.h, etc. represent header files other than the
header containing the class definition that are directly or indirectly
included into Class.cpp. 

The rule defined in a dependency file does not contain a recipe because 
the make utility can infer the required recipe from a related pattern 
rules that species how to create any *.o object file from a source file
with file name extension *.cpp or *.cu. The required pattern rule is 
given in a file named patterns.mk located in the namespace level
directory that contains the source file. 

The list of prerequisites given in a dependency file is generated 
automatically by using a compiler option to instruct the compiler to
analyze C++ include directives. The list of prerequisites generated by the 
PSCF build system also generally includes the config.mk files located in 
the relevant build directory (src or bld) and in the util directory. These 
two configuration files are added to the list of pre-requisites because
they define makefile variables whose values can affect conditional 
compilation of some features.  

Though not shown in the above example, the paths to the target and its 
prerequisites given in the rule defined in a dependency file are actually
all given as absolute paths, defined relative to the root of the entire 
unix filesystem.

Because dependency files are created as a side effect of compilation,
the dependency file associated with a compilable source file does not 
exist before the first time that source file compiled. In this case, 
however, the object file target is always considered outdated (since 
non-existent files are always out of date). A non-existent *.o target
file will thus be built if the rule to construct the target is invoked. 
The list of prerequisistes of an object target file is thus only needed
the target is first created, to determine if an *existing* target file 
is outdated or not.

\section developer_build_dependency_rule_sec Inclusion into makefiles

Makefiles that are located in subdirectories of the PSCF src or bld
directories all contain expressions that include multiple dependency 
files via include directives of the form
\code

-include $([directory]_OBJS:.o=.d)

\endcode
In this type of expression, [directory] represents the mangled name 
of a directory (e.g., rpc_fields)  and [directory])_OBJS is the name 
of a makefile variable that lists all of the object file targets 
associated with source files in that directory.  The expression 
([directory]_OBJS:.o=.d) uses a makefile text manipulation operator 
to replace the .o file extension in each file in this list by .d 
extension, thus creating a corresponding list of dependency files. 
The effect of this include directive is thus to instruct make to 
attempt to include the *.d dependency files associated with each of 
the object files listed in variable [directory]_OBJS.  The dash in 
front of the "include" keyword instructs make to continue quietly 
if any of the listed dependency file does not yet exist.

<BR>
\ref developer_build_source_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_page               (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_pattern_page (Next)

*/
