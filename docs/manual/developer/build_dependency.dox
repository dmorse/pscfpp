/*! \page developer_build_dependency_page Dependency (\*.d) Files

\ref developer_build_source_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_pattern_page (Next)
<BR>

The pattern rules used by PSCF to create an object file target by 
compiling a source file with file extension .cpp or .cu create both
an object file with file extension .o and a corresponding dependency 
file with file extension \*.d.  The resulting dependency file defines 
a makefile rule that lists all of the source files that are prerequisites 
of the resulting object file.  The pre-requisites of an object file are 
the files that are combined by the C preprocessor to create the 
translation unit that is compiled to create that object file.  These 
prerequisites include both the associated \*.cpp source file and all 
of the \*.h header files and (sometimes) \*.tpp template implementation 
files that were directly or indirectly included into that file via
preprocessor \#include directives.

The dependency file associated with an object file named Class.o defines 
a makefile rule that, is simplified form, might look something like this:
\code

Class.o: Class.cpp Class.h Header1.h Header2.h ....

\endcode
Here, Header1.h, Header2.h, etc. represent header files other than the
header containing the class definition that are directly or indirectly
included into Class.cpp. 

The rule defined in a dependency file does not contain a recipe. The
make command instead infers the required recipe from an applicable
pattern rule that species how to create any \*.o object file from a 
source file with file name extension \*.cpp or \*.cu. The required 
pattern rule is given in a file named patterns.mk located in the 
namespace level directory that contains the source list file. 

Though not shown in the above example, the paths to the target and its 
prerequisites given in the rule defined in a dependency file are actually
all given as absolute paths, defined relative to the root of the entire 
unix filesystem. As a result, the paths in real dependency files are 
actually much longer than shown in the above simplified example.

The list of prerequisites generated by the PSCF build system always 
includes the config.mk files located in the relevant build directory (src 
or bld) and in the util directory, in addition to any source code file
prerequisites. These two configuration files are added to the list of 
pre-requisites because they define makefile variables whose existence 
or values can control conditional compilation of some features. 
Changes in theses config.mk configuration files can thus cause changes 
the content of the translation unit that is created by the preprocessor 
and then passed to the compiler.

Makefiles contain include directives that to include the dependency files 
for all object files that the makefile is responsible for creating. The 
make command is thus generally able to find a rule with a prerequisite 
list for every existing object file target it may need to update.

Because dependency files are created as a side effect of compilation,
the dependency file associated with a compilable source file does not 
exist before the first time that source file compiled. In this case, 
however, the object file target is always considered out-of-date, since 
non-existent files are always out-of-date. A non-existent \*.o target
file will thus always be built if the rule to construct the target is 
invoked, or if it needed as a pre-requisite for constructing another
target.  The list of prerequisistes of an object file target is thus 
only needed after the target is first created, to determine if an 
*existing* target file is outdated or not.

The list of prerequisites given in a dependency file is generated 
automatically by a script that calls the gcc compiler with an option 
that instructs the compiler to analyze C++ include directives. This 
compiler option was designed for precisely this purpose, of 
automatically generating prerequisite lists for a makefile rule. 

<BR>
\ref developer_build_source_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_page               (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_pattern_page (Next)

*/
