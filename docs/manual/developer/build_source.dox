/*! \page developer_build_source_page Source List (sources.mk) Files

\ref developer_build_config_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_dependency_page  (Next)
<BR>

Almost every subdirectory of the  src/ directory tree contain a file
named "sources.mk". This file is a makefile fragment that is included
into other makefile fragments and makefiles. The purpose of each such
file is to maintain a list of all of the *.cpp or *.cu source files in
that directory that should be compiled when PSCF is build.

\section developer_build_list_sources_sec Source and object file lists

Every such sources.mk file defines a makefile variable whose value is
a list of all of the compilable source files that are located in that
directory and all of its subdirectories.  The name of this makefile
variable is always a string of the form
\verbatim
[directory]_
\endverbatim
 "[directory]" represents a mangled form of the name of the subdirectory
containing the source.mk file.  Specifically, the [directory] string in
each such variable name is constructed by taking the relative path from
the src/ directory to the subdirectory of interest and replacing each
"/" directory separator in this path an underscore ("_").  As an
example that is discussed in more detail below, the file
src/pscf/chem/sources.mk defines a variable of this kind named
\verbatim
   pscf_chem_
\endverbatim

Every sources.mk file also defines a second makefile variable with a
name of the form [directory]_OBJS that contains a corresponding list
of paths to the \*.o object files (extension *.o) that should be
created by compiling the listed source files. For example, the file
src/pscf/chem/sources.mk thus a defines a variable pscf_chem_OBJS.

In what follows, we refer to the [directory]_ variable in each such
file as a source file list, and the [directory]_OBJS variable as an
object file list. Paths to files in each source file list are always
given as relative paths, defined relative to the PSCF src/ directory.
File paths in the object file lists are instead always given as
absolute paths to the locations in which object files should be placed
within the build directory. The object file list is created
automatically by applying some simple text manipulation operations
to the source file list, as shown in the examples discussed below.

\section developer_build_list_example1_sec Directories with no subdirectories

The simplest type of sources.mk files occur in directories within the
src directory tree that do not contain any subdirectories.  As an
example of this case, the contents of the file src/pscf/chem/sources.mk
is shown below:
\verbatim
pscf_chem_= \
  pscf/chem/Monomer.cpp \
  pscf/chem/Vertex.cpp \
  pscf/chem/Edge.cpp \
  pscf/chem/Species.cpp \
  pscf/chem/SolventSpecies.cpp \
  pscf/chem/PolymerSpecies.cpp \
  pscf/chem/PolymerType.cpp \
  pscf/chem/PolymerModel.cpp \
  pscf/chem/MixtureBase.cpp \
  pscf/chem/Deby.cpp \
  pscf/chem/VertexIterator.cpp \
  pscf/chem/EdgeIterator.cpp

pscf_chem_OBJS=\
     $(addprefix $(BLD_DIR)/, $(pscf_chem_:.cpp=.o))

\endverbatim
The definition of pscf_chem_ in this example uses a makefile syntax
syntax in which a backslash (\\) character is used to continue a
statement to the next line. Lines 2 - 12 of this example thus
assign the variable pscf_chem a value that is list of file names
separated by spaces.

The value assigned pscf_chem_ in this example is a list of all of
the C++ source files in the relevant subdirectory, src/pscf/chem.
Note that all paths in this definition are given as relative paths,
defined relative to the src/ directory. All of these files are C++
source files with names that end with file extension .cpp. CUDA
C++ source files with file extension .cu can also be included in
source file lists. Source file lists should never, however, contain
any *.h header files or *.tpp template implementation files.

The object file list variable pscf_chem_OBJS_ is constructed in
the last two lines of this example.  The value that is assigned to
pscf_chem_OBJS is a corresponding list of absolute paths for object
files, with extension *.o.  This list is constructed here by
applying two makefile text manipulation functions to the value of
the source variable file list pscf_chem_. First, the ":" operator
is used in the expression $(pscf_chem_:.cpp=.o) to replace the
.cpp extension with .o in each of the file names in pscf_chem_.
The built in "addprefix" function is then used to add the value
$(BLD_DIR)/ as a common prefix to each name in the list. Here,
BLD_DIR is a makefile variable whose value gives the absolute
path to the desired build, which is defined elsewhere in the
build system. The result is a list of absolute paths to the
locations of all of the *.o object files that should be created
by compiling the files in the source file list.

\section developer_build_list_example2_sec Directories with subdirectories

We now consider the structure of a sources.mk file for a subdirectory
of src/ that contains one or more enclosed  subdirectories, each of
which contains source files. In this case, the value of the source file
list variable [directory]_ is a list of paths for all of the source
files in the directory tree rooted at the file that contains the
source.mk file, including source files in all of its subdirectories.
This list is created by concatenating source file lists defined in the
source.mk files of subdirectories.

** Example: **
As an example, here is the complete content of the file
src/rpc/fts//sources.mk for a directory src/rpc/fts that contains
several subirectories.
file:
\verbatim
# Include source list files from subdirectories
include $(SRC_DIR)/rpc/fts/simulator/sources.mk
include $(SRC_DIR)/rpc/fts/compressor/sources.mk
include $(SRC_DIR)/rpc/fts/montecarlo/sources.mk
include $(SRC_DIR)/rpc/fts/brownian/sources.mk
include $(SRC_DIR)/rpc/fts/perturbation/sources.mk
include $(SRC_DIR)/rpc/fts/ramp/sources.mk
include $(SRC_DIR)/rpc/fts/analyzer/sources.mk
include $(SRC_DIR)/rpc/fts/trajectory/sources.mk

rpc_fts_= \
  $(rpc_fts_simulator_) \
  $(rpc_fts_compressor_) \
  $(rpc_fts_montecarlo_) \
  $(rpc_fts_brownian_) \
  $(rpc_fts_perturbation_) \
  $(rpc_fts_ramp_) \
  $(rpc_fts_analyzer_) \
  $(rpc_fts_trajectory_)

rpc_fts_OBJS=\
     $(addprefix $(BLD_DIR)/, $(rpc_fts_:.cpp=.o))

\endverbatim
The first segment of this file is a set of include directives that
instruct make to include the contents of the sources.mk files from all
the subdirectories of src/rpc/fts. The make "include" directive is
analogous to the C/C++ \#include preprocessor command, and simply
instructs make to paste the contents of another file into the current
file, verbatim, before parsing the current file.

The next section of this file assigns a value to the source file list
variable rpc_fts_ by simply concatenating the values of the corresponding
source lists for the enclosed subdirectories. Each of the source file
list variables for a subdirectory is defined in the sources.mk file in
that subdirectory, each of which has been included into this file.
For example, the file $(SRC_DIR)/rpc/fts/brownian/sources.mk defines
a variable rpc_fts_brownian_ whose values gives a list of all of the
source files in src/rpc/fts/brownian. The concatenation of these
subdirectory sources lists yields a list of all of the source files
in the parent directory.

The statement that defines r1d_OBJS creates a corresponding object file
list by processing the source file list, using the same text processing
operations as those used in the simpler example given above for a
directory with no subdirectories.

\section developer_build_list_example3_sec Namespace level directories

The source list file in each the namespace level subdirectory of src
contains a definition of a rule for constructing an associated static
library, in addition to the code for constructing source and object
lists similar to that of other directories that contain subdirectories.

**Example** : As an example, here is the contents of the file
src/rpc/sources.mk in the src/rpc namespace level directory:

\verbatim
#-----------------------------------------------------------------------
# Source files in src/rpc and corresponding object files

# Include source list files from subdirectories
include $(SRC_DIR)/rpc/environment/sources.mk
include $(SRC_DIR)/rpc/field/sources.mk
include $(SRC_DIR)/rpc/solvers/sources.mk
include $(SRC_DIR)/rpc/scft/sources.mk
include $(SRC_DIR)/rpc/fts/sources.mk
include $(SRC_DIR)/rpc/system/sources.mk

# List of source files in src/rpc
rpc_= \
  $(rpc_environment_) \
  $(rpc_field_) \
  $(rpc_solvers_) \
  $(rpc_scft_) \
  $(rpc_fts_) \
  $(rpc_system_)

# List of object file targets
rpc_OBJS=\
     $(addprefix $(BLD_DIR)/, $(rpc_:.cpp=.o))

#-----------------------------------------------------------------------
# Path and target rule for the librpc.a library

rpc_LIBNAME=rpc
rpc_LIB=$(BLD_DIR)/rpc/lib$(rpc_LIBNAME).a

$(rpc_LIB): $(rpc_OBJS)
	$(AR) rcs $(rpc_LIB) $(rpc_OBJS)

#-----------------------------------------------------------------------
\endverbatim

The first part of this file, which defines values for rpc_ and rpc_OBJS,
is similar to shown in the previous example of a directory src/rpc/fts
that contains subdirectories but is not a namespace-level directory.

The only new feature in this example is the section at the end that
defines a makefile rule to construct a static library. The path to the
static library file is given by value of the variable $(rpc_LIB). This
is assigned a value $(BLD_DIR)/rpc/librpc.a that gives the absolute
path to a file named librpc.a in the rpc subdirectory of the relevant
build directory, i.e., the file src/rpc/librpc.a for in-source
compilation or bld/rpc/librpc.a for out-of source compilation.
The recipe of the rule to build this library file uses a variable 
$(AR) to represent the name of the archiver program. This is defined 
in the config.mk file in the build directory, and is set to "ar" by 
default. The rule constructs a library that incorporates the contents 
of all of the object files in the rps namespace-level directory.
Source list files in all other namespace level directories define 
an analogous rule.

<BR>
\ref developer_build_config_page      (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_page            (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_build_dependency_page (Next)

*/
