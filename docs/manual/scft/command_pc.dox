/*! \page scft_command_pc_page Commands - pscf_pc and pscf_pg

 \ref scft_command_1d_page     (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref scft_thermo_page (Next)
<BR>

The pscf_pc and pscf_pg programs accept identical set of commands, 
which are described on this page. These programs for periodic systems
accept a larger set of commands than the simpler pscf_1d program, 
though many basic commands are similar. The number of available commands 
is larger, in part, as a result of the fact that pscf_pc and pscf_pg can 
read and write several different formats for field files.  By convention, 
the names of commands that read or write a field file in symmetry-adapted 
basis format end with a suffix _BASIS, while names of commands that read 
or write files in read-space grid (r-grid) format end with a suffic 
_RGRID.  The pscf_pc and pscf_pg programs also accept a set of commands 
that can be used convert between different possible field file formats.

\section scft_command_pc_scft_sec Example: SCFT calculation

Below is an example of a simple command file for using pscf_pc to
perform a single SCFT calculation, using field files and an iterator 
algorithm that impose a specified space group symmetry that must be
declared in the parameter file. 
\code
READ_W_BASIS    in/w.bf
ITERATE
WRITE_W_BASIS   out/w.bf
WRITE_C_BASIS   out/c.bf
WRITE_C_RGRID   out/c.rf
WRITE_PARAM     out/data
WRITE_THERMO    out/data
FINISH
\endcode
The command "READ_W_BASIS in/w.bf" reads an initial guess for the
chemical potentials fields from the file in/w.bf, which must contain
the components of the fields in "basis" format, as coefficients in an
expansion in a symmetry-adapted Fourier basis.  The ITERATE command 
attempts to iteratively solve the SCFT equations starting from this 
initial guess, using the iterator algorithm specified in the parameter
file. The command "WRITE_W_BASIS out/w.bf" writes the resulting 
converged set of chemical potential fields to file out/w.bf in 
symmetry-adapted basis format. The command "WRITE_C_BASIS out/c.bf"
writes the corresponding monomer volume fraction fields to the file
out/c.bf in the same format, while "WRITE_C_RGRID out/c.rf" writes the
volume fraction fields in r-grid format, which can be used for subsequent
visualization. The command "WRITE_PARAM out/data" writes a param file
for the current system to the file out/data. The command,
"WRITE_THERMO out/data", appends the thermodynamic properties of the
converged solution to the end of the same file.  The FINISH command
instructs the main program to finish execution and return.

\section scft_command_pc_ex_sweep_sec Example: SCFT sweep

Here is an example of a minimal command file to perform an SCFT 
parameter sweep. 
\code
READ_W_BASIS    in/w.bf
SWEEP
FINISH
\endcode
The command "READ_W_BASIS in/w.bf" reads an initial guess for the
chemical potentials fields at the initial state of the sweep (the
state s=0) from the file in/w.bf.  The SWEEP command actually performs
a parameter sweep.  The FINISH command halts execution of the main 
program. 

The parameter file used to initialize a parameter sweep must contain 
an Iterator block and a Sweep block. The Sweep block defines the 
desired sequence of state points (i.e., choices of parameter values), 
while the Iterator block determines the behavior of the iteration 
algorithm used to solve the SCF equations at each state point.

The minimal command file required for a sweep is somewhat simpler than 
the corresponding command file for single SCFT calculation because the 
former does not contain any commands to output data associated with the 
converged solution. This is possible because the required data output 
operations are programmed to occur automatically at the end of each
step in the sweep.

\section scft_command_pc_commands_sec Commands

The following table shows a list of available commands for pscf_pc or
pscf_pg that are relevant to SCFT calculations. A few additional 
commands that are only relevant to PS-FTS calculations are discussed on 
a \ref psfts_command_page "separate page" within the manual chapter
that discusses such simulations.

Each clickable command name links to a more detailed discussion of a 
command or a group of closely related commands.

<table>
  <tr>
    <td> <b>command     </b> </td>
    <td> <b>parameter(s)</b> </td>
    <td> <b>action </b> </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_fieldin_sec "W Field Initialization"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_readwbasis_sub "READ_W_BASIS" </td>
    <td> filename [string] </td>
    <td>
      Read w fields from file filename, in symmetry-adapted basis format
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_readwrgrid_sub "READ_W_RGRID" </td>
    <td> filename [string] </td>
    <td> Read w fields from file filename, in real-space grid (r-grid)
         format. See \ref scft_command_pc_readwrgrid_sub "discussion"
         for constraints on usage. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_compute_sec "Computation"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_compute_sub "COMPUTE" </td>
    <td> </td>
    <td> Solve modified diffusion equation for the current w fields </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_iterate_sub "ITERATE" </td>
    <td> </td>
    <td> Iteratively solve SCFT equations. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_sweep_sub "SWEEP" </td>
    <td> </td>
    <td> Perform a SCFT parameter sweep.
         The associated parameter file must contain an Iterator block
         and a Sweep block. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
     \ref scft_command_pc_dataout_sec "Thermodynamic Data Output"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_param_sub "WRITE_PARAM" </td>
    <td> filename [string] </td>
    <td> Write the param file associated with the current computation to
         specified file "filename", excluding any Sweep block </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_thermo_sub "WRITE_THERMO" </td>
    <td> filename [string] </td>
    <td> Write SCFT predictions for thermodynamic data (free energy, 
         pressure, phi and mu for each species, and unit cell parameters) 
         to file filename.
         </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_stress_sub "WRITE_STRESS" </td>
    <td> filename [string] </td>
    <td> Write derivatives of SCFT free energy with respect to unit cell 
         parameters. If calculation contains an \ref scft_environment_page
         "Environment" object, the environment-modified stresses are also 
         written if they were calculated.  </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_fieldout_sec "Field Output"
    </td>
  </tr>
  <tr>
    <td>
   \ref scft_command_pc_fieldout_sec
    "WRITE_W_BASIS" </td>
    <td> filename [string] </td>
    <td> Write current w fields to file filename, in symmetry-adapted 
         basis format </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldout_sec "WRITE_W_RGRID" </td>
    <td> filename [string] </td>
    <td> Write w fields to file filename, in real-space grid (r-grid) 
         format </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldout_sec "WRITE_C_RGRID" </td>
    <td> filename [string] </td>
    <td> Write monomer volume fraction fields (c fields) to file filename,
         in r-grid format  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldout_sec "WRITE_C_BASIS" </td>
    <td> filename [string] </td>
    <td> Write monomer volume fraction fields (c fields) to file filename,
         in symmetry adapted basis format  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writeblockc_sub "WRITE_BLOCK_C_RGRID" </td>
    <td> filename [string] </td>
    <td> Write volume fraction fields (c fields) for all individual polymer
         blocks and solvent species to file filename, in r-grid format
         </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_qout_sec "Propagator Output"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writeqslice_sub "WRITE_Q_SLICE" </td>
    <td> filename [string], ip[int], ib[int], id[int], is[int] </td>
    <td> Write a single "slice" of a propagator at fixed contour step
         number is, for direction id (id=0 or 1), block number ib, and
         polymer number ip to a file named filename, in r-grid format.
         </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writeqtail_sub "WRITE_Q_TAIL" </td>
    <td> filename [string], ip[int], ib[int], id[int] </td>
    <td> Write the final slice (or "tail") of the propagator for direction
         id (id=0 or 1), block ib, and polymer ip to file filename, in
         r-grid format. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writeq_sub "WRITE_Q" </td>
    <td> filename [string], ip[int], ib[int], id[int] </td>
    <td> Write an entire propagator (all slices) for direction id, block ib,
         and polymer ip to a file named filename, in r-grid format.
         </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writeqall_sub "WRITE_Q_ALL" </td>
    <td> basename [string] </td>
    <td> Write all propagators for both directions of all blocks of all
         polymers to separate files with automatically generated filenames
         that begin with a common prefix given by the basename parameter.
     </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_crystal_sec "Crystallographic Information"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writewaves_sub "WRITE_WAVES" </td>
    <td> filename [string] </td>
    <td> Write list of all allowed wavevectors to file filename. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writestars_sub "WRITE_STARS" </td>
    <td> filename [string] </td>
    <td> Write a list of all wavevector stars to file filename. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writegroup_sub "WRITE_GROUP" </td>
    <td> filename [string] </td>
    <td> Write all group symmetry elements to file filename. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_fieldconvert_sec "Field File Format Conversions"
    </td>
  </tr>
  <tr>
    <td>
    \ref scft_command_pc_fieldconvert_sec "BASIS_TO_RGRID" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in symmetry-adapted basis format,
         write to file outFile in real-space grid (r-grid) format </td>
  </tr>
  <tr>
    <td>
    \ref scft_command_pc_fieldconvert_sec "RGRID_TO_BASIS" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in real-space grid (r-grid) format,
         write to file outFile in symmetry-adapted basis format.  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldconvert_sec "KGRID_TO_RGRID" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in discrete Fourier transform
         (k-grid) format, write to file outFile in r-grid format </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldconvert_sec "RGRID_TO_KGRID" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in real-space (r-grid) format,
         write to outFile in discrete Fourier expansion (k-grid) format
         </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldconvert_sec "BASIS_TO_KGRID" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in symmetry-adapted basis format,
         write to outFile in discrete Fourier transform (k-grid) format
         </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_fieldconvert_sec "KGRID_TO_BASIS" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read fields from file inFile in discrete Fourier transform
         (k-grid) format, write to file outFile in symmetry-adapted
         basis format. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_fieldanalysis_sec "Field File Analysis"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_symmetry_sub "CHECK_RGRID_SYMMETRY" </td>
    <td> inFile [string], epsilon [double] </td>
    <td> Read fields from file inFile in real-space (r-grid) format,
         check whether the fields are invariant under all elements of
         the space group specified in the param file to within the
         error threshold epsilon.  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_compare_sub "COMPARE_BASIS" </td>
    <td> file1 [string], file2 [string] </td>
    <td> Read fields from files file1 and file2 in basis format,
         compare all component of all fields and write a report
         of the magnitude of differences to the log output. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_compare_sub "COMPARE_RGRID" </td>
    <td> file1 [string], file2 [string] </td>
    <td> Read fields from files file1 and file2 in r-grid format,
         compare values at all grid nodes and writes a report
         of the magnitude of differences to the log output. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_fieldmanip_sec "Field File Manipulation"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_estimatewbasis_sub "ESTIMATE_W_BASIS" </td>
    <td> inFile [string], outFile [string] </td>
    <td> Read c fields in symmetry-adapted basis format from file 
         inFile, compute estimated w fields as initial guesses for 
         iteration, and write to file outFile. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_scale_sub "SCALE_BASIS" </td>
    <td> inFile [string], outFile [string], factor [real] </td>
    <td> Read fields from file inFile in basis format, multiply all 
         components by the value of parameter "factor", and write 
         the rescaled field to file outFile. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_scale_sub "SCALE_RGRID" </td>
    <td> inFile [string], outFile [string], factor [real] </td>
    <td> Read fields from file inFile in r-grid format, multiply 
         all elements by the value of parameter "factor", and write 
         the rescaled field to file outFile. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_expand_dim_sub "EXPAND_RGRID_DIMENSION" </td>
    <td> 
         inFile [string], outFile [string], 
         d[int], newGridDimensions Array[int] 
    </td>
    <td> Read D-dimensional r-grid fields from inFile, output to outFile in 
         format for d > D dimensions, with newGridDimensions[i] grid points 
         in added direction D+i for i < d - D.
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_replicate_sub "REPLICATE_UNIT_CELL" </td>
    <td> inFile [string], outFile [string], replicas Array[int] </td>
    <td> Read r-grid fields from inFile, output in replicated unit cell to
         outFile, with cell replicated replicas[i] times in direction i.
    </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
      \ref scft_command_pc_unitcell_sec "Unit Cell Initialization"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_unitcell_sec "SET_UNIT_CELL" </td>
    <td> lattice [string], parameters Array[double] </td>
    <td> Set unit parameters to values given as command arguments. </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
    \ref scft_command_pc_external_sec "External Fields"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_external_sec "READ_H_BASIS" </td>
    <td> filename [string] </td>
    <td> Read external (h) fields from file filename, in symmetry-adapted
         basis format </td>
  </tr>
  <tr>
    <td>
    \ref scft_command_pc_external_sec "READ_H_RGRID" </td>
    <td> filename [string] </td>
    <td> Read external (h) fields from file filename, in real-space grid
         (r-grid) format </td>
  </tr>
  <tr>
    <td>
    \ref scft_command_pc_external_sec "WRITE_H_BASIS" </td>
    <td> filename [string] </td>
    <td> Write external potential fields (h fields) to file filename,
         in symmetry adapted basis format  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_external_sec "WRITE_H_RGRID" </td>
    <td> filename [string] </td>
    <td> Write external potential fields (h fields) to file filename,
         in r-grid format  </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
    \ref scft_command_pc_mask_sec
    "Mask Fields (Inhomogeneous Density Constraints)"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_mask_sec "READ_MASK_BASIS" </td>
    <td> filename [string] </td>
    <td> Read a mask field from file filename, in symmetry-adapted
         basis format </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_mask_sec "READ_MASK_RGRID" </td>
    <td> filename [string] </td>
    <td> Read a mask field from file filename, in real-space grid
         (r-grid) format </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_mask_sec "WRITE_MASK_BASIS" </td>
    <td> filename [string] </td>
    <td> Write mask field to file filename, in symmetry adapted basis
         format  </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_mask_sec "WRITE_MASK_RGRID" </td>
    <td> filename [string] </td>
    <td> Write mask field to file filename, in r-grid format  </td>
  </tr>

  <tr>
    <td colspan="3" style="text-align:center">
    \ref scft_command_pc_timers_sec
    "Timer Commands"
    </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_writetimer_sub "WRITE_TIMERS" </td>
    <td> filename [string] </td>
    <td> Write a report of computational times spent on various
         operations in a preceding SCFT calculation or FTS
         simulation. </td>
  </tr>
  <tr>
    <td> \ref scft_command_pc_cleartimer_sub "CLEAR_TIMERS" </td>
    <td> filename [string] </td>
    <td> Clear the state of timers that keep track of time spent
         on different operations, by resetting all values to zero.
         </td>
  </tr>

</table>

Further discussion of particular commands and groups of commands is
provided below.

\section scft_command_pc_fieldin_sec W field initialization

The READ_W_BASIS, and READ_W_RGRID commands allow a user to set or reset
the w fields that are stored in program memory. The READ_W_BASIS command
reads files in symmetry-adapted basis format. The READ_W_RGRID command
reads w files in real-space grid (r-grid) format, which does not require
the fields to have any particular space group symmetry.  One of these
commands must be invoked to initialize the w fields before invoking any of
the computation commands. The w fields must normally be initialized by the
READ_W_BASIS command prior to any operation which assumes the existence of
a specified space group symmetry.

Each of these two field initialization commands reads a field file that
contains a header section that includes information about the
crystallographic unit cell and the space group name, as well as the number
of monomer types. The description of the unit cell type and space group
name given in this header section must match those declared in the
parameter file, as must the value of the number of monomer types. Each of
these two commands sets or resets the values of unit cell parameters that
are stored in program memory, by setting them equal to the values that are
given in this field file header.

\anchor scft_command_pc_readwbasis_sub
<b> READ_W_BASIS</b>:
The READ_W_BASIS command reads the coefficients of an expansion of
the w fields in a symmetry-adapted Fourier basis from an input file
whose name is specified as command parameter.

The code that reads files in basis format can read files that were
generated for a structure that has the space group symmetry declared in the
parameter file but that is defined on a different computation mesh, with
different number of grid points along each direction, than that described
by the "mesh" parameter in the parameter file. This code initializes to
zero the coefficients of any basis function that exists in the current
basis (which is created for the mesh declared in the parameter file) but
does appear in the input file. It also ignores values for coefficients of
basis functions that appear in the input file but that do not exist in the
current basis.

* *Technical note* :
The symmetry-adapted basis used by pscf_pc is normally created during 
the process of reading the first field file that that the program is 
instructed to read.  This basis is constructed immediately after 
reading the header of that file, which contains a list of values for 
the unit cell parameters. Initialization of the basis is delayed until
this point in program execution because values for unit cell parameters
are not provided in the parameter file, and required by the algorithm
that creates this basis. The choice of the initial values for the unit
cell parameters that are obtained in this way can affect the order in
which basis functions are listed internally, because the basis functions
are symmetry-adapted eigenvalues of the Laplacian that are listed in an
order of non-decreasing eigenvalues (or non-decreasing wavenumber) at
the time of creation. The set of basis functions that is created for a
particular mesh and space group is, however, independent of the values
of the unit cell parameter values that were used to create this order
during creation of the basis.

\anchor scft_command_pc_readwrgrid_sub
<b> READ_W_RGRID </b>:
The READ_W_RGRID command reads the values of w fields in real-space
grid (r-grid) format from an input file. The header of the an r-grid
field file contains a description of the mesh, defined by the number
of grid points in each direction. These values must exactly equal the
values given in the parameter file by the elements of the "mesh"
parameter, or the program will output an error message and stop
execution.

The READ_W_RGRID command cannot be used to initialize w fields for
subsequent use in an SCFT simulation of a structure with a specified
symmetry, for reasons that are explained below.  Users who wish to perform
an SCFT calculation for a structure with a specified space group should
thus initialize the w fields using either the READ_W_BASIS command, rather
than READ_W_RGRID.  The r-grid file format can represent a field with no
particular space group symmetry. When w fields are read in r-grid format
using this command, pscf_pc thus assumes that the w fields and any fields
that are computed from them may not be symmetric under the elements of the
space group declared in the parameter file. Because the existing iteration
algorithms for pscf_pc all use an expansion of the fields in
symmetry-adapted basis, the ITERATE and SWEEP command thus cannot be
invoked when the current w fields were initialized using the READ_W_RGRID
command. W fields that were initialize with the READ_W_RGRID command may,
however, be used by the COMPUTE command, which uses an algorithm that does
not assume the existence of any space group symmetry.

The READ_W_RGRID command is thus currently of very limited utility 
in pscf_pc. It was implemented as a starting point for later 
development of stochastic field theoretic simulation algorithms in
which the fluctuating field generally do not exhibit any special
symmetry.

\section scft_command_pc_unitcell_sec Unit Cell Initialization

The SET_UNIT_CELL command can be used to set or reset the parameters
(lengths and angles) of the periodic unit cell.  It is usually not
necessary, however, to use this command to set unit cell parameters 
because these parameters are also set to the values given in a field 
file header whenever the READ_W_BASIS or READ_W_RGRID command is 
used to read W fields from a file. The SET_UNIT_CELL provides an
alternate mechanism to set these parameters, in order to manually
override values that previously been read from a field file, or to
set initial unit cell parameters prior to reading a field file. 

The SET_UNIT_CELL command take a string argument that must be the name
name of a lattice type of the appropriate dimension (e.g., cubic, for
a system with D=3) by a followed by a list of unit cell parameter 
values (one or more lengths, and sometimes angles). The lattice type 
string argument must match the lattice parameter given in the Domain 
section of the parameter file. The number and interpretation of the 
unit cell parameter values depends on the lattice type, as discussed 
\ref user_unitcell_page "elsewhere". 

\section scft_command_pc_compute_sec SCFT Computations

The COMPUTE, ITERATE and SWEEP commands perform the primary computations
involved in a self-consistent field calculation.  Each performs the
same operation as the analogous command for the pscf_1d program. Each
of these commands requires an initialized set of w fields and unit cell
parameters as an input, which must have been initialized by a previous
call to READ_W_BASIS or READ_W_RGRID.

\anchor scft_command_pc_compute_sub
<b> COMPUTE </b>:
The COMPUTE command solves solves the single molecule statistical
mechanics problem for all polymer and solvent species for a system of
non-interacting molecules subjected to the current w-fields. This
modifies the current c-fields stored in program memory, but does not
modify the w fields.

\anchor scft_command_pc_iterate_sub
<b> ITERATE </b>:
The ITERATE command attempts to iteratively solve the self
self-consistent field equations for a fixed set of input parameters, and 
may optionally modify the unit cell parameter so as to minimize the 
Helmholtz free energy density.  The associated parameter file must 
contain an Iterator block, which specifies the choice of SCFT iteration 
algorithm and any parameters required by that algorithm. Parameters of
required by the iteration algorithm generally include an error 
tolerance "epsilon" and a boolean "isFlexible" flag that determines 
whether the iteration algorithm treat the unit cell as flexible 
(isFlexible == true) or rigid (isFlexible == false).  Iteration 
modifies the current w fields (i.e., the fields that are stored in 
program memory), and modifies the unit cell parameters if and only 
if the unit cell is treated as flexible.  The w fields and unit cell 
parameters that are in memory on entry to iteration are used as 
initial guesses.

\anchor scft_command_pc_sweep_sub
<b> SWEEP </b>:
THE SWEEP command attempts to solve the SCFT equations at a sequence
of points along a path through the space of possible choices of input
parameters. This command may only be invoked if the parameter file
contains an Iteration block and Sweep block. The Sweep block defines
the desired sequence of state points (i.e., choices of parameter 
values). The SWEEP command uses the current w fields and unit cell 
parameters as initial guesses for the first state point in the 
sequence, and then generates initial guesses for subsequent points 
by extrapolation of the solutions obtained at previous points.

\section scft_command_pc_dataout_sec Data output commands

The WRITE_PARAM and WRITE_THERMO commands can be used to create a
record of the input parameters and computed thermodynamic properties
associated with an SCFT calculation.

\anchor scft_command_pc_param_sub
<b> WRITE_PARAM </b>:
The WRITE_PARAM writes a slightly modified copy of the parameter
file to a file whose name that is specified as a command parameter.
The version of the parameter file written by this command outputs
the current values for all parameters, and excludes any Sweep block.
The output of this command is designed to serve as a record of the
input parameters associated with a single SCFT calculation.

\anchor scft_command_pc_thermo_sub
<b> WRITE_THERMO </b>:
The WRITE_THERMO command outputs a report of values for thermodynamic 
properties obtained after solution of a SCFT problem. The details of
the output of this command can be found on the 
\ref scft_thermo_page "Thermodynamic Properties" page.

If the file whose name is passed to the WRITE_THERMO command already
exists, the report of thermodynamic properties will be appended to
the end of this file, rather than overwriting the file.
This is designed to allow users to output a parameter file block
that contains the input parameters followed by a report of computed
thermodynamic properties in a single file, if desired, by invoking
WRITE_PARAM and WRITE_THERMO with the same file name parameter.

\anchor scft_command_pc_stress_sub
<b> WRITE_STRESS </b>:
The WRITE_STRESS command outputs a report of values of derivatives
of the SCFT free energy with respect to unit cell parameters. These
derivatives should be zero to within numerical error for a converged 
SCFT solution of a problem with a flexible unit cell, for which the
unit cell parameters should minimize the free energy, but are
generally nonzero for the solution of an SCFT problem in a rigid unit 
cell. Results are derivatives of the Helmholtz free energy per monomer 
(as output by the WRITE_THERMO command) with respect to unit cell 
parameters. These derivatives are listed the conventional order of
the unit cell parameters for the relevant lattice type, as described 
\ref user_unitcell_page "here".

In a system that contains an \ref scft_environment_page "Environment",
the environment-modified stresses are also written, if they were 
calculated. These stresses take into account the presence of a mask 
and/or external field in the stress calculation, and may perform 
additional modifications so that the stress can minimize a property 
other than the Helmholtz free energy per monomer. The specific meaning 
of an environment-modified stress depends on the type of Environment, 
as documented \ref scft_environment_page "elsewhere".

As with WRITE_THERMO, if the file passed to WRITE_STRESS already 
exists, then the stress data will be appended to the end of this file.

\section scft_command_pc_fieldout_sec Field output commands

The WRITE_W_BASIS, WRITE_W_RGRID, WRITE_C_BASIS, and WRITE_C_RGRID
can be used to output the current w fields or c fields associated 
with all different monomer types. The suffix in these command names 
specifies the file format: Commands with names that end in BASIS 
output fields in basis format, and commands with names that end 
in RGRID output fields in r-grid format. In what follows, we use 
FORMAT to mean a suffix that has allowed values BASIS and RGRID.

<b> WRITE_W_(FORMAT) </b>:
The WRITE_W_BASIS and WRITE_W_RGRID commands output the current w 
fields (monomer chemical potential fields) to a specified output 
file in basis or rgrid format, respectively.

<b> WRITE_C_(FORMAT) </b>:
The WRITE_W_BASIS and WRITE_W_RGRID commands output the current c fields
(volume fraction fields) to a specified output file in basis or rgrid
format.

Fields can be output in symmetry-adapted basis format only if those fields
are known to have the specified space group symmetry. This symmetry is
known to exist for w fields if and only if they were initialized using the
READ_W_BASIS command and subsequently modified only by iteration algorithms
that maintain space group symmetry.  Symmetry is assumed to exist for c
fields only if the c fields were computed from w fields that are known to
be symmetric.

Fields that represent states in a field theoretic MC or BD simulation must
be input and output using the RGRID format.

\anchor scft_command_pc_writeblockc_sub
<b> WRITE_BLOCK_C_RGRID </b>:
The WRITE_BLOCK_C_RGRID command outputs the current volume fraction
fields (c-fields) for all blocks of all polymers and for all solvent
species r-grid format as separate fields within a single file. The
resulting file has a data section analogous to that produced by the
\ref scft_command_pc_writeblockc_sub "WRITE_BLOCK_C" command of
the pscf_1d program.  The resulting file contains a header section
identical to that contained in any r-grid field file, followed by a
data section.  The format of the data section is similar to that of
an r-grid field file that contain one field per monomer type, except
that each polymer block and solvent species is treated as a separate
monomer type, and thus output in a separate column of the data
section.  Blocks and solvent species are output in the order in which
they appear within the parameter file, as in the output of the
\ref scft_command_1d_writeblockc_sub "WRITE_BLOCK_C" command of the
pscf_1d program.

\section scft_command_pc_qout_sec Propagator output

In the inner loop of a SCFT calculation, a modified diffusion equation
(MDE) is solved within every block of every polymer to obtain a set of
so-called propagator functions. Each polymer block has two associated
propagator functions, each associated with one of the two directions
in which the block can be traversed.  Each propagator function
\f$ q({\bf r}, s) \f$ is a function of position \f$ {\bf r} \f$ and a
contour variable \f$ s \f$ measured within a block as a contour distance
from the vertex at which the propagator originates.  Each such propagator
function is associated with a particular direction (identified by index
id = 0 or 1), a particular block (block index ib), and a particular
polymer (polymer index ip).  We refer to the function of position alone
that is obtained by evaluating a propagator at a fixed value of \f$ s \f$
as a "slice".  Because the MDE for each such propagator is computed
numerically at evenly spaced values of \f$ s \f$, a computationally
accessible slice may be identified by a integer contour step index
\f$ is \f$ that is equal to zero at the vertex at which the propagator
originates, and increases with increasing distance \f$ s \f$ from that
vertex.

The pscf_pc program accepts several commands that output propagators
and propagator slices to one or more files. The names for these commands
start with a string "WRITE_Q", followed by a suffix that describes what
information is output by invoking the command. All of these commands take
a filename string as a parameter, and all but one of them take values of
several integer indices needed to identify a particular propagator or
slice.

All of these commands use file formats that report values of slices on
the nodes of the regular real-space grid that is used internally in
computations, analogous to the r-grid file format for w and c fields.
The file format always starts with a header section identical to that
of an r-grid field file, followed by a data section in which the values
of each slice are output in a format analogous to that of a r-grid
field file for a system with only one monomer type, in which all values
are output in a single column, with nodes listed in the same order as
in an r-grid field file.

\anchor scft_command_pc_writeqslice_sub 
<b> WRITE_Q_SLICE </b>:
The command WRITE_Q_SLICE write the values of a propagator slice at
a specified contour variable index \f$ is \f$ to an output file.
This command named must be followed by the name of the output file,
and values for the polymer index \f$ ip \f$, the block index \f$ ib \f$
and the direction index \f$ id \f$, in that order.
The data section for output by this function is the same as that of
an r-grid field file for a system with one monomer type.

\anchor scft_command_pc_writeqtail_sub 
<b> WRITE_Q_TAIL </b>:
The command WRITE_Q_TAIL write the values of the propagator slice at a
value of \f$ s \f$ equal to the length of the block, corresponding to
the slice evaluated at the vertex at which the propagator terminates.
This command named must be followed by the name of the output file, and
values for the polymer index \f$ ip \f$ and the block index \f$ ib \f$,
in that order.  The resulting output file has the same format as that
used by WRITE_Q_SLICE.

Users may instead output the value of slice of a propagator
corresponding to the vertex at which it originates (i.e., the propagator
"head" rather than "tail"), by invoking WRITE_Q_SLICE with a contour
variable index \f$ is = 0 \f$, corresponding to a contour variable
\f$ s = 0 \f$,

\anchor scft_command_pc_writeq_sub 
<b> WRITE_Q </b>:
The command WRITE_Q writes all slices of a specified propagator to a
single file.  This command name must be followed by the name of the
output file and values for the polymer index \f$ ip \f$ and block
index \f$ ib \f$, in that order.

The output file produced by this command contains a header section
followed by a sequence of data sections, in which each data section
contains the data for a single slice at an integer value of the countour
variable index. Data sections are listed in order of increasing countour
variable index. The header section is similar to that of an r-grid file,
except for the addition of line at the end that contain the word "nslice"
followed by the value of the number of slices.  Each data section begins
with a line containing the word "slice" followed by value of the contour
variable index for the slice represented by that section. The value of
the slice index ranges from 0 for the first slice (the "head") to
nslice - 1 for the last (the "tail"). The format of the remainder of each
data section is the same as that of the data section of an r-grid field
file for a system containing one monomer type, which consists of a single
column of numbers containing the values of the associated propagator
slice on the nodes of the regular spatial mesh used throughout the
computation.

<em> Comment for readers who read the source code </em>: This command 
calls the function Rpc::System::writeQ, which defines the output 
format, and is defined in the C++ file src/rpc/System.tpp.

\anchor scft_command_pc_writeqall_sub 
<b> WRITE_Q_ALL </b>:
The command WRITE_Q_ALL writes all slices of every propagator of every
polymer to a set of files, with all the slices of each propagator
written to a single file, but different propagators output in different
files.  This command name must be followed by the value of a string
parameter "basename" that contains a common prefix for the names of
the resulting file set of output files.

Each of files created by this command has the same format as that of
a file created by the \ref scft_command_pc_writeq_sub "WRITE_Q" command.
The name of the file containing the propagator associated with polymer
ip, block ib, and direction id is given by a string of the form
(basename)_(ip)_(ib)_(id).rf, where (basename) denotes the value of
the basename command parameter, and where (ip), (ib), and (id) denote
string representations of the values of the non-negative integers ip,
ib, and id. Thus, for example, if the command is passed a basename
parameter out/q, then the file out/q_0_2_1.rf will contain all slices
of the propagator associated with polymer 0, block 2 and direction 1.

\section scft_command_pc_crystal_sec Crystallographic information

The commands WRITE_WAVES and WRITE_STARS allow the user to output
information about the symmetry-adapted basis that program has 
constructed for space group and mesh specified in the parameter file. 
The command WRITE_GROUP outputs all of the symmetry operations of 
the space group.

The symmetry-adpated basis used by PSCF is constructed by identifying 
sets of allowed wavevectors that are related by symmetry, which we 
refer to as "stars", and constructing a basis function associated with 
each star as linear superpositions of planes waves with wavevectors 
that belong to that star. The coefficients of plane waves associated 
with wavevectors within such superposition are complex numbers with 
the same absolute magnitude and relative phases (i.e., differences 
between complex arguments) that are determined by the requirement 
that each such function be invariant under all operations of the 
specified space group.

\anchor scft_command_pc_writewaves_sub
<b> WRITE_WAVES</b>:
The WRITE_WAVES command outputs an ordered list of unique wavevectors
that can appear in the expansion of a function with the specified space
group symmetry, with associated information about each wavevector.
The name of this command must be followed by the name of the file to
which this listing should be written.
The format of the file created by this command is discussed
\ref scft_command_pc_wave_page "here" .

\anchor scft_command_pc_writestars_sub
<b> WRITE_STARS</b>:
The WRITE_STARS command outputs a list of information about stars, or 
associated basis functions.
The name of this command must be followed by the name of the file to
which this listing should be written.
The format of the file created by this command is discussed
\ref scft_command_pc_star_page "here" .

\anchor scft_command_pc_writegroup_sub
<b> WRITE_GROUP</b>:
The WRITE_GROUP command outputs a list of all of the symmetry operations
in the space group to a file.
The name of the output file is given as a command argument that follows
the command name.
The format of the file created by this command is discussed
\ref scft_command_pc_group_page "here" .

\section scft_command_pc_fieldconvert_sec Field File Format Conversions

The 6 commands 
<b>BASIS_TO_RGRID</b>, <b>RGRID_TO_BASIS</b>, <b>KGRID_TO_RGRID</b>,
<b>RGRID_TO_KGRID</b>, <b>BASIS_TO_KGRID</b>, and <b>KGRID_TO_BASIS</b>
each reads a field file containing a set of fields in the format 
specified by the first field file format descriptor in the command name 
(i.e., BASIS, RGRID, or KGRID) and writes the same field to another file 
in the format specified by the second descriptor. Each of these commands 
takes two file names as parameters, the first of which is the name of 
the input file, and the second of which is the name of the output file.  

For example, a command
\code
BASIS_TO_RGRID   out/w.bf   out/w.rf
\endcode
would read a file named "out/w.bf" that contains a set of fields in
symmetry-adapted basis format, and writes a representation of the same
field to a file named "w.rf" in r-grid format.  As with all file names,
relative file names are interpreted as names defined relative to the
current working directory.

These file conversion function do not have any effect on the w and
c fields that are stored in memory to represent the current state of
the system of primary interest. All of the mathematical operations
that these commands perform in order to convert from one format to 
the other are performed using private temporary arrays.

The r-grid and k-grid formats can be used to represent any real field,
but the basis format can only represent fields that are symmetric under
all symmetry elements of a specified space group. The name of the relevant
space group specified both in the parameter file and in the header of the 
field file. The conversion from r-grid or k-grid formats to basis format 
are thus only valid if the field contained in the r-grid or k-grid input
file actually has the assumed symmetry.  The RGRID_TO_BASIS and 
KGRID_TO_BASIS output warnings if they finds that one or more fields in
the input file are not symmetric to within some tolerance, but nonetheless 
attempt to complete the conversion. Applying either of these conversion 
functions to a field that does not have the specified space group 
symmetry is not a valid operation, however, and can modify the fields in 
unpredictable ways.

The conversion to a basis format from an r-grid or k-grid format is
guaranteed to be safe if the declared space group is the trivial group 
that contains only the identity element (i.e., 1D group P_1, 2D plane 
group p_1, or 3D space group P_1), since this group does no imply
any nontrivial symmetry constraints.

\section scft_command_pc_fieldanalysis_sec Field File Analysis

\anchor scft_command_pc_symmetry_sub 
The <b>CHECK_RGRID_SYMMETRY</b> command can be used to check whether 
a field that is represented in r-grid format has a specified space group
symmetry to within a specified tolerance. The command takes the name
of an input file and error tolerance epsilon as parameters. It reads
the file with the specified name, checks if it is invariant under all
space group operations to within the specified tolerance, and writes
a report to the log file.

\anchor scft_command_pc_compare_sub 
The <b>COMPARE_BASIS</b> and <b>COMPARE_RGRID</b> commands each read 
a pair of field files in the same format (basis or rgrid format, 
respectively), computes differences between corresponding fields, 
and write a report to the log file summarizing several measures of 
the magnitude of the differences. 

\section scft_command_pc_fieldmanip_sec Field File Manipulations

\anchor scft_command_pc_estimatewbasis_sub
<b> ESTIMATE_W_BASIS </b>:
The ESTIMATE_W_BASIS command reads a set of approximate monomer volume
fraction fields in symmetry-adapted basis format from the file whose name
is passed as the first command parameter, and uses these to construct 
an estimate of the corresponding w fields, which is written to a file whose
name is passed as the second command parameter. This is intended to allow 
users to construct an initial guess for w fields needed as an input to 
the ITERATE and SWEEP commands from an initial guess for the volume 
fraction fields for the structure of interest. The initial guess for the 
volume fraction fields does not need to be perfect, merely close enough 
to the final structure to allow a chosen iteration algorithm to 
converge.

The estimated w fields are computed by setting the Lagrange multiplier
field to zero in the self-consistent field condition, giving an estimated
w field
\f[
   w_{\alpha}({\bf r}) =
   \sum_{\beta} \chi_{\alpha\beta}\phi_{\beta}({\bf r})
\f]
for monomer type \f$ \alpha \f$, in which \f$ \phi_{\beta} ({\bf r}) \f$
is the volume fraction of monomer type \f$ \beta \f$, as read from the
input file, and \f$ \chi_{\alpha\beta} \f$ is a binary Flory-Huggins
interaction parameter.

\anchor scft_command_pc_scale_sub 
The <b>SCALE_BASIS</b> and <b>SCALE_RGRID</b> commands each read 
an field file (in basis or rgrid format, respectively), generates
a field by multiplying all components or elements of the fields 
by a common scalar factor, and writes the resulting re-scaled fields
to an output file.  The field is multiplied by the value of the 
command argument "factor" to obtain the re-scaled field. 

\anchor scft_command_pc_expand_dim_sub
The <b> EXPAND_RGRID_DIMENSION</b> command allows a user to take a
field that was computed using a reduced dimensionality D=1 or D=2
and use it to create a field file output in a format appropriate to 
a higher dimension d, with D < d <= 3. For example, this command
could be used to convert the result of a 1D SCFT calculation for 
a lamellar phase into a file format that could be read in as the
initial field configuration for a 3D FTS simulation of a lamellar
phase. To this, the command would be used within a command file for 
pscf_pc invoked with a command line option -d 1 (thus setting D=1)
to read in the converged file for a lamellar phase, and with a
command parameter d=3 in order to output a file in the format
appropriate for a 3D calculation. In order to expand the number
of dimensions, values of all fields are assumed to be independent
of coordinates associated with the added dimensions. The parameter
newGridDimensions is an integer array of dimension d-D in which
element i contains the number of grid points along added direction 
D+i, for 0 <= i < d-D.

\anchor scft_command_pc_replicate_sub
The <b> REPLICATE_UNIT_CELL </b> command is instead designed to 
read in a field file containing one unit cell of a periodic 
structure and create a corresponding file in which that unit
cell is replicated a specified number of times in each direction.
This is useful because SCFT calculations are normally performed
within a single unit cell, but it is often necessary to perform
FTS calculations of ordered structures in simulation unit cells
that contain several unit cells of the ordered structure in order
to minimize finite size effects in calculations with fluctuating
fields. Parameter replicas is an array of D integers in which 
element i contains the number of replicas of the original unit
cell along direction i, for 0 <= i < D.


\section scft_command_pc_external_sec External fields

The pscf_pc program accepts several commands that allow users to input
and output external chemical potential fields that act on monomers of
each type, in addition to the internally generated fields that arise
in a self-consistent field approximation from interactions. External
fields are referred to throughout the source code and documentation
as "h" fields. This feature was introduced into the code to allow
simulation of polymers in thin films or other confined geometries,
for which external fields that act differently on different monomer
types are used to represent selective interactions of polymers with the
confining walls.

When nonzero external fields have been set, the self-consistent field
equations become equations of the form
\f[
   w_{\alpha}({\bf r})
   = \sum_{\beta} \chi_{\alpha\beta}\phi_{\beta}({\bf r})
   + \xi({\bf r}) + h_{\alpha}({\bf r})
\f]
for each monomer type \f$ \alpha \f$, in which \f$ h_{\alpha}({\bf r}) \f$
is the external field for monomers of type \f$ \alpha \f$,
\f$ \xi ({\bf r}) \f$ is the Lagrange multiplier local pressure field that
imposes incompressibility, and \f$ \chi_{\alpha\beta} \f$ is the binary
Flory-Huggins interaction parameter for  monomers of types \f$ \alpha \f$
and \f$ \beta \f$.

Simulations of polymer liquids confined to thin films may use external 
fields to represent interactions of different monomer types with the 
boundaries or "walls" of the film.  The external fields that are used to
define a thin film problem are defined algorithmically by the thin film
ImposedFieldsGenerator, as described \ref scft_thin_films_page "here".

The <b>READ_H_BASIS</b> and <b>READ_H_RGRID</b> commands can be used 
to instead read in external fields from an existing file and apply them 
to the current simulation. Files that contain external fields use the 
same formats as those used for w fields. Users who use a thin film 
ImposedFieldsGenerator to simulate a thin film generally do not need to 
read external fields from file, because they are instead defined by the 
generator.

The <b>WRITE_H_BASIS</b> and <b>WRITE_H_RGRID</b> commands write the current 
external fields, if any, to a specified field in basis or r-grid format.

\section scft_command_pc_mask_sec Mask field (inhomogeneous density constraint)

A polymer fluid can be confined to a specified region by introducing a
"mask" field that modifies the incompressibility constraint.  A mask field
is a dimensionless function of position, denoted here by \f$ m({\bf r}) \f$,
that has a value very close to 1 throughout a region to which the polymer
material is confined and a value very close to 0 throughout a region from
which the material is being excluded. The incompressibility constraint for
a system that is subjected to a mask is modified so as to require that
\f[
   v \sum_{\alpha=1} c_\alpha({\bf r}) = m({\bf r})
\f]
at every point in the system, where \f$ m({\bf r}) \f$ is the mask field,
\f$ c_{\alpha}({\bf r}) \f$ is the number concentration of monomers of type
\f$ \alpha \f$ at point \f$ {\bf r} \f$, \f$ v \f$ is the monomer reference
volume, and the summation is over all distinct monomer types. Introduction
of a mask provides a simple way to impose geometric confinement within a
program that is designed for periodic systems.

The mask that is used to confine a polymer to a thin film is generated
algorithmically by the thin film ImposedFieldsGenerator, as described in 
more detail \ref scft_thin_films_page "here".  

The commands 
\anchor scft_command_pc_readmaskbasis_cmd <b>READ_MASK_BASIS</b> or
\anchor scft_command_pc_readmaskrgrid_cmd <b>READ_MASK_RGRID</b>
may instead be used to read a mask field from a file in basis or
r-grid format. The file formats are identical to those which would be 
used for a w or c field file for a system with only one monomer type.
These commands are generally not needed by users who use an 
ImposedFieldsGenerator to define a thin film problem, because the mask 
is constructed and updated internally by the generator.

The commands 
\anchor scft_command_pc_writemaskbasis_cmd <b>WRITE_MASK_BASIS</b> or
\anchor scft_command_pc_writemaskrgrid_cmd <b>WRITE_MASK_RGRID</b>
may instead be used to write any current mask field to a file in 
basis or r-grid format.

\section scft_command_pc_timers_sec Timer commands

The WRITER_TIMERS and CLEAR_TIMERS commands are designed to output
and manipulate time counters that keep track of how much time was
spent on various operations during either a preceding SCFT or a 
preceding FTS.  These commands are designed to work either with
SCFT or FTS calculations, depending on what types of calculation 
have been enabled in the parameter file. 

\anchor scft_command_pc_writetimer_sub <b>WRITE_TIMERS</b>:
The WRITE_TIMERS command writes a report of the amounts of computational 
time spent on different operations since the main program was invoked, 
or since the last time the timers were cleared by invoking CLEAR_TIMERS. 
The resulting report is output both to the file whose name is given a 
parameter and to the log output (i.e., standard output).  If the 
parameter file contains an Iterator block, and has thus enabled 
SCFT, this command will output information about times spent on
various operations with the SCFT iterator. If the parameter file 
contains a BdSimulator or McSimulator block, and thus enables FTS, 
then the WRITE_TIMERS will output information about time spent in 
different operations with the FTS time step loop.

\anchor scft_command_pc_cleartimer_sub <b>CLEAR_TIMERS</b> 
The CLEAR_TIMERS command clears the state of all available timers, 
resetting values of all timer variables to zero. 

\section scft_command_pc_subpages_sec Contents (subpages)

Each of the following subpages gives more detailed information about
output formats of files created by particular commands. Each is also
referred to above in the discussion of the corresponding command.

<ol>
 <li> \subpage scft_command_pc_wave_page  "WRITE_WAVES" </li>
 <li> \subpage scft_command_pc_star_page  "WRITE_STARS" </li>
 <li> \subpage scft_command_pc_group_page "WRITE_GROUP" </li>
</ol>

<BR>
 \ref scft_command_1d_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref scft_command_page     (Up) &nbsp; &nbsp; &nbsp; &nbsp;
 \ref scft_thermo_page      (Next)
*/
