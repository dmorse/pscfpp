/*! \page about_history_page Package History

\ref about_methods_page  (Prev)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref about_programs_page (Next)
<BR>

Development of the C++/CUDA version of PSCF that is described in this 
manual began in 2015 as a project to rewrite an older Fortran program 
of the same name.  The Fortran version of PSCF is an SCFT program for 
incompressible liquids containing one or more species of linear block 
polymers and (optionally) one or more small molecule solvent species. 
The acronym PSCF stands for "Polymer Self-Consistent Field", reflecting 
this origin of the package as an SCFT program. 

The Fortran version of PSCF is maintained in a separate github.com 
repository at
<a href= https://github.com/dmorse/pscf/>https://github.com/dmorse/pscf</a> ,
but is no longer being actively developed. The name "pscfpp" that is 
used for the github repository containing the current version was 
chosen to avoid a clash with the name "pscf" of the repository 
containing the older Fortran version.

The current C++/CUDA version of PSCF is intended to supersede the Fortran
version. The current version provides almost all of the capabilities of
the Fortran program, and many new capabilities. New users of PSCF should 
use the current version documented here, and users of the Fortran version 
should consider switching to the current version whenever they can.

<b> Features and advantages of current C++ version </b>:

Characteristics of the current version of PSCF that distinguish it from 
the legacy Fortran version include the following:
<ul>
  <li>
  The current version is an extensible package of several programs intended 
  for different geometries, algorithms and/or computer hardware. The legacy
  Fortran version is a single program for SCFT of periodic structures.
  </li>
  <li>
  The current version can simulate mixtures containing acyclic branched block 
  polymers. The Fortran version was designed for linear block polymers.
  </li>
  <li>
  The current version can use a graphics processing units (GPU) to 
  accelerate calculations involving large systems.
  </li>
  <li>
  The current version can perform partial-saddle point field theoretic 
  simulation (PS-FTS) calculations in addition to SCFT.
  </li>
</ul>

<b> Features unique to the legacy Fortran program </b>:

The following features of the legacy Fortran program have not been ported 
to the C++/CUDA version:
<ul>
  <li> SCFT linear-reponse calculations for ordered structures.  </li>
  <li> A useful quasi-Newton-Broyden SCFT iteration algorithm. </li>
  </li>
</ul>
These two features are described in more detail below.

The Fortran PSCF program can compute the SCFT linear response of periodic 
equilibrium structures to infinitesimal inhomogeneous external fields.  This 
capaability allows calculation of limits of stability of ordered phases and 
description of composition fluctuations within such phases. This is the only 
important capability of the Fortran program that has not been ported to the 
new C++ version.  It will remain available within the Fortran program, which 
is still maintained in a separate github repository.  The required algorithm 
and some applications are described in the following reference: 

Ranjan, A. and Qin, J. and Morse, D.C., 
<a href="https://doi.org/10.1021/ma0714316">
"Linear Response and Stability of Ordered Phases of Block Copolymers", 
</a> **2008** *Macromolecules* <i>41</i>, 942.  

The Fortran PSCF program also provides a unique quasi-Newton/Broyden SCFT 
iteration algorithm that is still an excellent algorithm for the problems 
of moderate size for which it was originally designed. This algorithm is
based on a physically motivated initial approximation for the inverse 
Jacobian of the SCFT fixed-point problem and iterative improvement of this 
guess via a Broyden update scheme.  This algorithm was abandoned in the 
new C++ version in favor of Anderson-mixing algorithms because the amount 
of memory required by this Newton/Broyden algorithm increases as the square 
of the number of spatial degrees of freedom (i.e., number of basis functions), 
which prevented the algorithm from being applied to larger problems.

<BR>
\ref about_methods_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref about_page           (Up)   &nbsp; &nbsp; &nbsp; &nbsp;
\ref about_programs_page  (Next)

*/
