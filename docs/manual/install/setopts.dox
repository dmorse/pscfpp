/*! \page install_setopts_page Compile Time Options

\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_targets_page (Next)
<BR>

The PSCF build system provides a set of scripts named "setopts" that allow
the users to set some optional compile-time features of the package to be
enabled or disabled when it is compiled, and to set some parameters that
are passed to the compiler.

\section install_setopts_setopts The "setopts" scripts

The PSCF src and bld directories are used as build directories for
in-source and out-of source compilation, respectively. After the configure
script has been run, each of these two standard build directories will
contain an exectuable shell script named "setopts". A setopts script can
be used to modify configuration files that control what features are
enabled when code is compiled.

The setopts script in each build directory (i.e., in the src or bld
directory) may be invoked from within that directory to modify which
features will be enabled and disabled in code that is subsequently
compiled in that build directory.

The PSCF root directory also contains an analogous setopts script. That
"global" setopts script can be invoked to apply identical changes in
compile-time features to the configuration files in both the src and
bld directories.

Each setopts script changes settings by editing build configuration files
that are used by the makefile system to define what actions should be
taken during compilation. These configuration files are files named
config.mk that are installed by the configure script in the bld and src
directories. To change which features are enabled when PSCF is compiled,
the setopts script must thus be invoked after running the configure
script, but before compiling.

\subsection install_setopts_debug_sub Enabling or disabling debugging

The "debugging" feature of PSCF can be enabled to add additional run-time
sanity checks (such as run-time checking of array index bounds) at a slight
cost in performance.  The "debugging" feature is enabled or disabled by
invoking setopts script before compiling the package with the "-d" option,
using an option parameter "1" to enable debugging or "0" to disable it.
The debugging feature is disabled by default. To enable these additional
run-time checks, one would enter
\code
./setopts -d1
\endcode
To instead disable debugging before compiling, one would enter
\code
./setopts -d0
\endcode
Entering setopts with the -c option from the pscpp root directory
enables or disables debugging checks for both in-source and out-of-source
compilation, while entering the same commands from the src or bld
directory enables or disables this feature only for in-source or
out-of-source compilation, respectively.

\subsection install_setopts_cuda_sub Enabling or disabling CUDA compilation

The CUDA feature enables conditional compilation of CUDA code on machines
that have an appropriate nVidia GPU and a CUDA development kit. Compilation
of CUDA code is disabled by default.  Compilation of CUDA code can be
enabled or disabled by invoking a setopts script with the "-c" option,
with an option parameter "1" to enable CUDA compilation or "0" to disable
CUDA compilation.

To enable compilation of CUDA source files, one could thus enter
\code
./setopts -c1
\endcode
To disable CUDA compilation, one instead enters
\code
./setopts -c0
\endcode
Executing the setopts script with the -c option from the pscpp root
directory enables or disables CUDA compilation for both in-source and
out-of-source compilation, while entering the same commands from within
the src or bld directory enables or disables CUDA compilation only for
in-source or out-of-source compilation, respectively.

\subsection install_setopts_arch_sub Setting a target GPU architecture

Before attempting to compile CUDA code, one should use a setopts script to
set the compiler to generate code optimized for the specific type of NVIDIA
GPU that is installed on the computer on which the program will be run.
This is done by issuing a command of the form
\code
 ./setopts -a [architecture id]
\endcode
in which [architecture id] represents a string identifier for a particular
GPU architecture.

The architecture id that is passed to the -a option is a string of the
form "sm_MN" in which M and N represent the major (M) and minor (N)
version numbers for the CUDA "compute capability" of the relevant GPU.
This command sets the value of the makefile variable NVARCH, which is
defined in the file src/config.mk or bld/config.mk. The value of this
variable is passed to the NVIDIA nvcc CUDA compiler as the parameter
of the "-arch" compiler option. By default, NVARCH is set to "sm_70",
corresponding to compute capability 7.0, which is the appropriate level
for a V100 GPU.

\subsection install_setopts_query_sub The "query" (-q) option

The -q command line option of the setopts script may be used to query
what optional features are currently set to be enabled or disabled
during compilation. To see an example, change directory (cd) to the
PSCF bld directory and then enter
\code
./setopts -q
\endcode
If debugging and CUDA compilation were both disabled (the default
configuration), this would result in the output
\code
-d  OFF - debugging
-c  OFF - CUDA compilation
\endcode
If debugging were disabled but CUDA compilation had been enabled,
the output might instead look something like this:
\code
-d  OFF - debugging
-c  ON  - CUDA compilation
sm_70   - CUDA architecture id
\endcode
The value of the CUDA architecture id (the string set by the -a
option) is printed only if CUDA compilation is enabled.

Entering "./setopts -q" from either the bld or scr directory yields
a report that shows which optional features are enabled or disabled
by settings in the config.mk file in the same directory. Entering
"./setopts -q" from the PSCF root directory instead yields a report
that shows current settings for both the bld and src directories.

\subsection install_setopts_help_sub The "help" (-h) option

Invoking the setopts script with the -h ("help") option, by entering
\code
./setopts -h
\endcode
produces a list of all command line options accepted by the script.

\section install_setopts_build_directories_section Build configuration files

All mutable attributes of the PSCF build system are defined by the
contents of a pair of files named "config.mk" that are installed in the
src and bld directories by the configure script.  These two files, which
we refer to as build configuration files, are makefile fragments that
are included by other makefiles during the build process.  The file
bld/config.mk defines the configuration used for out-of-source
compilation, while src/config.mk defines the configuration for in-source
compilation.  The setopts scripts work by editing one or both of these
build configuration files. Users may also edit the config.mk files
directly if they are comfortable doing so.  These configuration files
contain comments that explain the meaning and usage of all of the
makefile variables defined there.

<BR>
\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_page  (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_targets_page (Next)
*/
