/*! \page install_require_page Requirements and Dependencies

\ref install_page (Up/ Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_source_page (Next)
<BR>

PSCF is designed to be compiled from source and run in a unix-like 
environment.  The package has been tested and used on systems running 
either linux or recent versions of the Mac OS X operating systems.
PSCF can take advantage of a CUDA-capable Nvidia GPU if one is 
available, or can run on standard CPU hardware.  Compilation is 
controlled by a system of unix makefiles.

PSCF is distributed only as source code, and so must be compiled by 
the user.  All C++ source code follows the ANSI 2011 C++ language 
standard.  Code that uses an NVIDIA (GPU) is written in CUDA.

\section require_overview_section Overview

PSCF currently provides two programs that are designed to run on a 
conventional CPU (pscf_1d and pscf_pg), and one that is designed to 
use an NVIDIA GPU (pscf_pg). We distinguish these in what follows by 
referring to CPU programs and a GPU-enabled program.

In order to compile just the two CPU programs in the PSCF package, 
the system on which the code is compiled and run must have:

   - a git version control client
   - a C++ compiler
   - a Python interpreter, version 3 or greater
   - the GNU Scientific Library (GSL) (header and library)
   - the FFTW fast Fourier transform library (header and library)

A git client is needed to obtain the source code, by cloning the git
repository in which PSCF is maintained on the github.com site. A Python
interpreter is needed during compilation because the build system that 
compiles PSCF uses several Python scripts that are provided within 
the PSCF repository. A git client, C++ compiler and Python interpreter 
will all normally come pre-installed in common linux distributions or 
in a Mac OS operating system in which 
\ref require_mac_commandtools_section "command line tools" have been 
installed.  The GNU scientific library is used by several programs 
within the package for linear algebra operations.  The FFTW Fast Fourier 
transform library is used extensively by the pscf_pc programs for 
periodic microstructures.

In order to compile the GPU-enabled pscf_pg program, the user's system 
must also have:

   - a CUDA-enabled NVIDIA graphics card
   - the <a href="https://developer.nvidia.com/cuda-toolkit">
     NVIDIA CUDA Toolkit</a>

The CUDA Toolkit is a development environment that provides the 
nvcc C++/CUDA compiler and a variety of GPU-accelerated libraries,
including the cuFFT fast Fourier transform library.

Users who wish to generate a local copy of this web manual as a set
of html pages that reside on the user's computer, will also need to 
install the "doxygen" documentation utility.

\section require_mac_commandtools_section Mac OS X command line tools

In order to compile the PSCF CPU programs in Mac OS X, the operatign 
system must first be configured to provide a unix command-line development 
environment. One can do this by installing the Mac Command Line Tools 
package for XCode.  In recent versions of Mac OS X, it is not necessary 
to install the rather large XCode integrated development environment 
(IDE) to obtain just the much smaller set of command line tools. The 
command line tools package is all that is needed to compile and use PSCF.

To install just the command line tools, follow the instructions given
<a href= https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>
here</a>. 
Briefly, the instructions are to:

   - Launch the Terminal application, found in Applications/Utilities

   - From a terminal, type the command string: "xcode-select --install"

This will a cause a software update window that contains the following 
text: "The xcode-select command requires the command line developer 
tools.  Would you like to install the tools now?" Confirm by clicking 
the "Install" button on this window. When prompted, also agree to the
Terms of Service.  The package will then download and install.

If you choose to install the full XCode package from the Apple App store,
installation of the Command Line Tools is offered as an option during the
installation process. 

To use PSCF on a Mac, you must type commands from a terminal window, as
in a traditional unix command line environment. Mac users may thus want
to add the Terminal app to their Dock for easy access.

\section require_git_section Git client

The source code for the C++/CUDA version of PSCF described here is hosted
on the github server, at <a href="http://github.com">github.com</a>, as
project dmorse/pscfpp.  The older Fortran PSCF program is maintained in
a separate github repository, as project dmorse/pscf. 

The source code of this current version of PSCF may be obtained by using
a git version control manager to clone the public
<a href=https://github.com/dmorse/pscfpp>git repository</a>.
To do this, a git client must be installed on your computer.

One can check whether a git client is already installed by entering
\code
git --version
\endcode
from the unix command line. If git is installed and functional, this
should return a git version number, such as "git version 2.30.1".

One can also perform a simpler check that the shell can find an exectuable
named "git" by entering the command
\code
which git
\endcode
If the git executable is found, this should return a valid path, such
as /usr/bin/git .  If this command does not return a valid path, you
probably need to install git before proceeding.

Instructions for installing git on different platforms are given in
the documentation on the <a href=http://git-scm.com>git web page</a>, 
and in chapter 1.5 of the
<a href=https://git-scm.com/book/en/v2>Pro Git book </a>
by Scott Chacon, which is available to be read for free online. 
If you are using linux, and git is not already installed, you should
use the preferred package manager on your linux distribution to install
a git client.  If you are using Mac OS X, a git client should be installed 
as a component of the XCode Command Line Tools package, which is also 
needed for other purposes. 

\section install_require_python Python interpeter

The system used to compile and install PSCF requires access to a 
Python 3 interpreter.  One can check if a python interpreter is 
accessible by issuing the command
\code
python3 --version
\endcode
and confirming that the command works, and returns a version number 
3.0 or greater. Alternatively, one can issue the command
\code
which python3
\endcode
and confirm that it returns a non-empty path such as /user/bin/python3. 
We recommend using of the command "python3" rather than "python" to make 
sure that you access a python 3 interpreter on any system in which a
Python 2.* interpreter may still also be installed. A Python 3 interpeter
should be available from the command line by default in any common linux 
distribution (e.g., Ubuntu or Fedora), and should be available in Mac 
OS X after installation of the command line tools package.

\section install_require_compiler_cpp C++ compiler

By default, the PSCF build system invokes a C++ compiler using the
compiler commnd name "g++". On linux systems, this command normally 
invokes the GNU compiler collection (GCC) C++ compiler. On an Apple
computer running Mac OS X that is configured for unix C++ development 
(see above), the "g++" command is normally a link to the Clang compiler, 
which is the default compiler for C++ development on Mac OS X. The Clang 
compiler accepts almost all the same command line options as the GNU 
compiler, and so functions as a compatible replacement for the GCC C++ 
compiler. 

It is possible to configure the PSCF build system during the initial 
configuration process so as to instead use a different C++ compiler, as 
discussed \ref install_configure_page "here".  Even when a different 
compiler command is used to compile source code, however, the PSCF build 
system will still invoke the "g++" command with appropriate options to 
analyse dependencies among source files. The PSCF makefile system thus 
always requires that the "g++" command be available to the build system.

One can check if the command "g++" exists by entering
\code
which g++
\endcode
from a terminal command line. If the "which" utility returns a valid
nonempty path, such as /usr/bin/g++, then the command g++ exists and
can be located by the operating system.

The name of the command used to invoke the compiler when compiling
C++ files and the choices of options passed to the compiler can be
changed by modifying a compiler configuration file that is read during 
initial configuration of the build system. The configuration process 
is described in more detail \ref install_configure_page "here".

\section install_require_compiler_cuda CUDA compiler

To compile the GPU-accelerated pscf_pg program, the system must have 
an appropriate NVIDIA GPU and a CUDA development package installed. The
NVIDIA nvcc C++/CUDA compiler is designed to integrate with the GNU g++ 
compiler, so we recommend using the GNU compiler to compile C++ source 
files if you are planning to compile CUDA code for use on the same 
machine.

\section install_require_ubuntu Packages: Ubuntu and other Debian-based linux systems

The CPU programs in PSCF require access to development versions of the 
Gnu Scientific Library (GSL) and FFTW packages.  These may be installed
on Ubuntu or other Debian based linux distribution later on version 16.0 
or later using the commands:
\code
sudo apt install libfftw3-dev  
sudo apt install libgsl-dev  
\endcode
To also install the doxygen documentation generator utility, use the 
command
\code
sudo apt install doxygen
\endcode
Installing doxygen is not necessary to compile PSCF, but allows you to 
generate a local copy of this web documentation.

On older Debian-based systems, or as a lower level alternative, one may 
use the "apt-get" command rather than "apt" with the same arguments.

\section install_require_mac  Packages: Mac OS X

We recommend using a package manager to install GSL and FFTW on Mac OS X.
If you are not already using a package manager for managing unix programs
on Max OS X, we recommend that you install the <a href="https://brew.sh/">
Homebrew </a> package manager, following instructions given on the Homebrew
web site. Possible alternatives include the older MacPorts or Fink package
managers, or compiling the required packages directly from source files 
obtained from package home pages.

Using Homebrew, you may install the GSL and FFTW packages with the commands
\code
brew install gsl
brew install fftw
\endcode
To also install doxygen, issue the command
\code
brew install doxygen
\endcode

Mac users should be aware that Homebrew installs files in different 
locations on newer Macs that use Apple silicon (e.g., an M1 or M2 chip)
than the file locations used by Homebrew on older Macs that use an Intel
CPU.

On Macs with an Intel CPU, Homebrew installed links to required header 
and library files in subdirectories of the /usr/local directory. Because 
/usr/local is  one of the standard directories in which a unix shell 
normally looks for such files, PSCF can be installed on such machines 
using a default configuration for the makefile system that is the same 
as the default used on linux machines.

On Macs with Apple silicon, Homebrew instead installs all files in
/opt/homebrew.  This requires users to add paths to this directory and/or
some of its subdirectories to the search paths used by the compiler to
find header and library files.  A compiler configuration file that
modifies these search paths is provided as part of PSCF, as discussed
\ref install_configure_compiler_file_sec "here".

\section install_require_module Linux software modules

At the University of Minnesota, PSCF is often run on a cluster provided
by the Minnesota Supercomputer Institute (MSI). The computer clusters at 
MSI, at at many similar multi-user facilities, use the linux "module"
command to allow users to load particular software packages, including
particular choices of compiler. The module command is the user interface
to the "Modules" package, which is a system for automating changes in a
users unix shell environment that are required in order to use particular
software packages.

On a multi-user system that uses linux modules, the command
\code
module avail
\endcode
should give a listing of all software modules available for use on a
particular system. The syntax for the command to load a particular 
module is
\code
module load  module-name
\endcode
where module-name represents the name of a particular software module, as
listed by the "module avail" command.

On the computer cluster at MSI, we currently normally set up the
compilation environment by invoking
\code
module load fftw/3.3.6-double-gnu-7.2.0
module load cuda
\endcode
before compiling PSCF. We use a version of fftw that was compiled with
GCC version 7.2.0, rather than the most recent version, because the
current version of CUDA (v10.0) isn't compatible with GCC versions with
primary version numbers greater than 7.

These module load commands can be either be entered manually from the
command line by the user after logging in, or they can be configured to
be entered automatically on login by adding them to the users .profile
or .bash_profile script.

<BR>
\ref install_page (Up / Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_source_page (Next)

*/
